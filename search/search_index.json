{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Project Introduction \u00b6 FastAPI-Amis-Admin fastapi-amis-admin is a fastapi management background framework with high performance, high efficiency and easy expansion Inspired by Django-Admin, and has powerful functions not inferior to Django-Admin. Source code \u00b7 Online demo \u00b7 \u6587\u6863 \u00b7 Can't open the document? fastapi-amis-admin is a high-performance and efficient web-admin framework developed based on fastapi + amis , using Python 3.7+ and based on standard Python type hints. The original intention of fastapi-amis-admin is to improve the fastapi application ecology and quickly generate a visual management background for the fastapi web application. key features \u00b6 High performance : Based on FastAPI , you can enjoy all the advantages of FastAPI . Faster efficiency : Perfect coding type hints, code reusability is higher. Support asynchronous and synchronous mixed writing : ORM is based on SQLModel + Sqlalchemy , can customize the database type freely, supports synchronous and asynchronous mode, and has strong scalability. Separation of front-end and back-end : The front-end is rendered by Amis , the back-end interface is automatically generated by fastapi-amis-admin , and the interface can be reused. Strong scalability : The background page supports Amis page and ordinary html page, and developers can easily customize the interface freely. Automatically generate API documentation : The interface documentation is automatically generated by FastAPI , which is convenient for developers to debug and share the interface. core dependencies \u00b6 FastAPI responsible for the web part SQLModel Responsible for ORM model mapping ( Perfect combination of SQLAlchemy + Pydantic , with SQLAlchemy and all features of Pydantic ) Amis Responsible for Admin background page display Project composition \u00b6 fastapi-amis-admin consists of three core modules, of which amis , fastapi-sqlmodel-crud can be used as independent modules, and amis_admin is built based on the former. amis : pydantic data model building library based on baidu amis for fast generation/parsing of amis json data. fastapi-sqlmodel-crud : Based on FastAPI + SQLModel , it is used to quickly build Create, Read, Update, Delete common API interfaces. admin : Inspired by Django-Admin , combined with amis + fastapi-sqlmodel-crud , used to quickly build Web Admin management background. Install \u00b6 pip install fastapi_amis_admin Simple example \u00b6 from fastapi import FastAPI from fastapi_amis_admin.admin.settings import Settings from fastapi_amis_admin.admin.site import AdminSite # Create FastAPI application app = FastAPI () # Create AdminSite instance site = AdminSite ( settings = Settings ( database_url_async = 'sqlite+aiosqlite:///amisadmin.db' )) # Mount the background management system site . mount_app ( app ) if __name__ == '__main__' : import uvicorn uvicorn . run ( app , debug = True ) Model management example \u00b6 from fastapi import FastAPI from sqlmodel import SQLModel from fastapi_amis_admin.admin.settings import Settings from fastapi_amis_admin.admin.site import AdminSite from fastapi_amis_admin.admin import admin from fastapi_amis_admin.models.fields import Field # Create FastAPI application app = FastAPI () # Create AdminSite instance site = AdminSite ( settings = Settings ( database_url_async = 'sqlite+aiosqlite:///amisadmin.db' )) # First create a SQLModel model, please refer to: https://sqlmodel.tiangolo.com/ class Category ( SQLModel , table = True ): id : int = Field ( default = None , primary_key = True , nullable = False ) name : str = Field ( title = 'CategoryName' ) description : str = Field ( default = '' , title = 'Description' ) # Register ModelAdmin @site . register_admin class CategoryAdmin ( admin . ModelAdmin ): page_schema = 'Category Management' # Configuration management model model = Category # Mount the background management system site . mount_app ( app ) # Create initialized database table @app . on_event ( \"startup\" ) async def startup (): await site . db . async_run_sync ( SQLModel . metadata . create_all , is_session = False ) if __name__ == '__main__' : import uvicorn uvicorn . run ( app , debug = True ) Form management example \u00b6 from typing import Any from fastapi import FastAPI from pydantic import BaseModel from starlette.requests import Request from fastapi_amis_admin.amis.components import Form from fastapi_amis_admin.admin import admin from fastapi_amis_admin.admin.settings import Settings from fastapi_amis_admin.admin.site import AdminSite from fastapi_amis_admin.crud.schema import BaseApiOut from fastapi_amis_admin.models.fields import Field # Create FastAPI application app = FastAPI () # Create AdminSite instance site = AdminSite ( settings = Settings ( database_url_async = 'sqlite+aiosqlite:///amisadmin.db' )) # Register FormAdmin @site . register_admin class UserLoginFormAdmin ( admin . FormAdmin ): page_schema = 'UserLoginForm' # Configure form information, can be omitted form = Form ( title = 'This is a test login form' , submitText = 'Login' ) # Create form data model class schema ( BaseModel ): username : str = Field ( ... , title = 'username' , min_length = 3 , max_length = 30 ) password : str = Field ( ... , title = 'password' ) # Process form submission data async def handle ( self , request : Request , data : BaseModel , ** kwargs ) -> BaseApiOut [ Any ]: if data . username == 'amisadmin' and data . password == 'amisadmin' : return BaseApiOut ( msg = 'Login successful!' , data = { 'token' : 'xxxxxx' }) return BaseApiOut ( status =- 1 , msg = 'username or password is wrong!' ) # Mount the background management system site . mount_app ( app ) if __name__ == '__main__' : import uvicorn uvicorn . run ( app , debug = True ) Using the command line \u00b6 # Install command line extensions pip install fastapi_amis_admin [ cli ] # view help faa --help # Initialize a `FastAPI-Amis-Admin` project faa new project_name --init # Initialize a `FastAPI-Amis-Admin` application faa new app_name # quickly run the project It ' s true Interface preview \u00b6 Open http://127.0.0.1:8000/admin/ in your browser: Open http://127.0.0.1:8000/admin/docs in your browser: Related Items \u00b6 Amis-Admin-Theme-Editor :Theme-Editor for the fastapi-amis-admin. Allows to add custom css styles and to apply theme --vars change on the fly. FastAPI-User-Auth : A simple and powerful FastAPI user RBAC authentication and authorization library. FastAPI-Scheduler : A simple scheduled task management project based on FastAPI + APScheduler . FastAPI-Amis-Admin-Demo : A sample FastAPI-Amis-Admin application. FastAPI-User-Auth-Demo : A sample FastAPI-User-Auth application. agreement \u00b6 fastapi-amis-admin is based on Apache2.0 open source and free to use, and can be used for commercial purposes for free, but please clearly display the copyright information about FastAPI-Amis-Admin in the display interface. Thanks \u00b6 Thanks to the following developers for their contributions to FastAPI-Amis-Admin:","title":"Project Introduction"},{"location":"#project-introduction","text":"","title":"Project Introduction"},{"location":"#key-features","text":"High performance : Based on FastAPI , you can enjoy all the advantages of FastAPI . Faster efficiency : Perfect coding type hints, code reusability is higher. Support asynchronous and synchronous mixed writing : ORM is based on SQLModel + Sqlalchemy , can customize the database type freely, supports synchronous and asynchronous mode, and has strong scalability. Separation of front-end and back-end : The front-end is rendered by Amis , the back-end interface is automatically generated by fastapi-amis-admin , and the interface can be reused. Strong scalability : The background page supports Amis page and ordinary html page, and developers can easily customize the interface freely. Automatically generate API documentation : The interface documentation is automatically generated by FastAPI , which is convenient for developers to debug and share the interface.","title":"key features"},{"location":"#core-dependencies","text":"FastAPI responsible for the web part SQLModel Responsible for ORM model mapping ( Perfect combination of SQLAlchemy + Pydantic , with SQLAlchemy and all features of Pydantic ) Amis Responsible for Admin background page display","title":"core dependencies"},{"location":"#project-composition","text":"fastapi-amis-admin consists of three core modules, of which amis , fastapi-sqlmodel-crud can be used as independent modules, and amis_admin is built based on the former. amis : pydantic data model building library based on baidu amis for fast generation/parsing of amis json data. fastapi-sqlmodel-crud : Based on FastAPI + SQLModel , it is used to quickly build Create, Read, Update, Delete common API interfaces. admin : Inspired by Django-Admin , combined with amis + fastapi-sqlmodel-crud , used to quickly build Web Admin management background.","title":"Project composition"},{"location":"#install","text":"pip install fastapi_amis_admin","title":"Install"},{"location":"#simple-example","text":"from fastapi import FastAPI from fastapi_amis_admin.admin.settings import Settings from fastapi_amis_admin.admin.site import AdminSite # Create FastAPI application app = FastAPI () # Create AdminSite instance site = AdminSite ( settings = Settings ( database_url_async = 'sqlite+aiosqlite:///amisadmin.db' )) # Mount the background management system site . mount_app ( app ) if __name__ == '__main__' : import uvicorn uvicorn . run ( app , debug = True )","title":"Simple example"},{"location":"#model-management-example","text":"from fastapi import FastAPI from sqlmodel import SQLModel from fastapi_amis_admin.admin.settings import Settings from fastapi_amis_admin.admin.site import AdminSite from fastapi_amis_admin.admin import admin from fastapi_amis_admin.models.fields import Field # Create FastAPI application app = FastAPI () # Create AdminSite instance site = AdminSite ( settings = Settings ( database_url_async = 'sqlite+aiosqlite:///amisadmin.db' )) # First create a SQLModel model, please refer to: https://sqlmodel.tiangolo.com/ class Category ( SQLModel , table = True ): id : int = Field ( default = None , primary_key = True , nullable = False ) name : str = Field ( title = 'CategoryName' ) description : str = Field ( default = '' , title = 'Description' ) # Register ModelAdmin @site . register_admin class CategoryAdmin ( admin . ModelAdmin ): page_schema = 'Category Management' # Configuration management model model = Category # Mount the background management system site . mount_app ( app ) # Create initialized database table @app . on_event ( \"startup\" ) async def startup (): await site . db . async_run_sync ( SQLModel . metadata . create_all , is_session = False ) if __name__ == '__main__' : import uvicorn uvicorn . run ( app , debug = True )","title":"Model management example"},{"location":"#form-management-example","text":"from typing import Any from fastapi import FastAPI from pydantic import BaseModel from starlette.requests import Request from fastapi_amis_admin.amis.components import Form from fastapi_amis_admin.admin import admin from fastapi_amis_admin.admin.settings import Settings from fastapi_amis_admin.admin.site import AdminSite from fastapi_amis_admin.crud.schema import BaseApiOut from fastapi_amis_admin.models.fields import Field # Create FastAPI application app = FastAPI () # Create AdminSite instance site = AdminSite ( settings = Settings ( database_url_async = 'sqlite+aiosqlite:///amisadmin.db' )) # Register FormAdmin @site . register_admin class UserLoginFormAdmin ( admin . FormAdmin ): page_schema = 'UserLoginForm' # Configure form information, can be omitted form = Form ( title = 'This is a test login form' , submitText = 'Login' ) # Create form data model class schema ( BaseModel ): username : str = Field ( ... , title = 'username' , min_length = 3 , max_length = 30 ) password : str = Field ( ... , title = 'password' ) # Process form submission data async def handle ( self , request : Request , data : BaseModel , ** kwargs ) -> BaseApiOut [ Any ]: if data . username == 'amisadmin' and data . password == 'amisadmin' : return BaseApiOut ( msg = 'Login successful!' , data = { 'token' : 'xxxxxx' }) return BaseApiOut ( status =- 1 , msg = 'username or password is wrong!' ) # Mount the background management system site . mount_app ( app ) if __name__ == '__main__' : import uvicorn uvicorn . run ( app , debug = True )","title":"Form management example"},{"location":"#using-the-command-line","text":"# Install command line extensions pip install fastapi_amis_admin [ cli ] # view help faa --help # Initialize a `FastAPI-Amis-Admin` project faa new project_name --init # Initialize a `FastAPI-Amis-Admin` application faa new app_name # quickly run the project It ' s true","title":"Using the command line"},{"location":"#interface-preview","text":"Open http://127.0.0.1:8000/admin/ in your browser: Open http://127.0.0.1:8000/admin/docs in your browser:","title":"Interface preview"},{"location":"#related-items","text":"Amis-Admin-Theme-Editor :Theme-Editor for the fastapi-amis-admin. Allows to add custom css styles and to apply theme --vars change on the fly. FastAPI-User-Auth : A simple and powerful FastAPI user RBAC authentication and authorization library. FastAPI-Scheduler : A simple scheduled task management project based on FastAPI + APScheduler . FastAPI-Amis-Admin-Demo : A sample FastAPI-Amis-Admin application. FastAPI-User-Auth-Demo : A sample FastAPI-User-Auth application.","title":"Related Items"},{"location":"#agreement","text":"fastapi-amis-admin is based on Apache2.0 open source and free to use, and can be used for commercial purposes for free, but please clearly display the copyright information about FastAPI-Amis-Admin in the display interface.","title":"agreement"},{"location":"#thanks","text":"Thanks to the following developers for their contributions to FastAPI-Amis-Admin:","title":"Thanks"},{"location":"about/","text":"Help or get help \u00b6 If you like the fastapi_amis_admin project, or it works for you, you can help fastapi_amis_admin in the following ways. Star in GitHub \u00b6 You can \"star\" FastAPI in GitHub (click the star button in the upper right corner): https://github.com/amisadmin/fastapi_amis_admin \u2b50\ufe0f By adding an asterisk, other users will be able to find it more easily and see that it is already useful to others. Help others with issues in GitHub \u00b6 You can see the existing issues and try to help others, most of the time these issues you probably already know the answer to. \ud83e\udd13 create question \u00b6 You can create a new issue in the GitHub repository, for example: Ask a question or ask a question . Suggest a NEW FEATURE . NOTE : If you create an issue then I will ask you to help others too. \ud83d\ude09 Join the group chat \u00b6 Currently only a QQ group chat has been established: 229036692 , interested partners can join the discussion. Create pull request \u00b6 You can [contribute] to the source code using pull requests such as: Fix spelling mistakes you find in the documentation. Help [translate documentation into] your language. You can also help review translations created by others. Proposed new documentation section. Fix existing issues/bugs. Add new features. Sponsored Authors \u00b6 The development and maintenance of fastapi-amis-admin , including document writing are very time-consuming work. If you want to support the development of fastapi-amis-admin , you can financially support the author in the following ways. Love Power Generation (afdian.net) PayPal.Me Sponsor tools to support projects \u00b6 FastAPI-Amis-Admin appreciates the support of the following projects. You can also sponsor: FastAPI Amis SQLModel Pydantic","title":"Help or get help"},{"location":"about/#help-or-get-help","text":"If you like the fastapi_amis_admin project, or it works for you, you can help fastapi_amis_admin in the following ways.","title":"Help or get help"},{"location":"about/#star-in-github","text":"You can \"star\" FastAPI in GitHub (click the star button in the upper right corner): https://github.com/amisadmin/fastapi_amis_admin \u2b50\ufe0f By adding an asterisk, other users will be able to find it more easily and see that it is already useful to others.","title":"Star in GitHub"},{"location":"about/#help-others-with-issues-in-github","text":"You can see the existing issues and try to help others, most of the time these issues you probably already know the answer to. \ud83e\udd13","title":"Help others with issues in GitHub"},{"location":"about/#create-question","text":"You can create a new issue in the GitHub repository, for example: Ask a question or ask a question . Suggest a NEW FEATURE . NOTE : If you create an issue then I will ask you to help others too. \ud83d\ude09","title":"create question"},{"location":"about/#join-the-group-chat","text":"Currently only a QQ group chat has been established: 229036692 , interested partners can join the discussion.","title":"Join the group chat"},{"location":"about/#create-pull-request","text":"You can [contribute] to the source code using pull requests such as: Fix spelling mistakes you find in the documentation. Help [translate documentation into] your language. You can also help review translations created by others. Proposed new documentation section. Fix existing issues/bugs. Add new features.","title":"Create pull request"},{"location":"about/#sponsored-authors","text":"The development and maintenance of fastapi-amis-admin , including document writing are very time-consuming work. If you want to support the development of fastapi-amis-admin , you can financially support the author in the following ways. Love Power Generation (afdian.net) PayPal.Me","title":"Sponsored Authors"},{"location":"about/#sponsor-tools-to-support-projects","text":"FastAPI-Amis-Admin appreciates the support of the following projects. You can also sponsor: FastAPI Amis SQLModel Pydantic","title":"Sponsor tools to support projects"},{"location":"amis/types/","text":"BaseAmisModel \u00b6 Inherited base class \u00b6 Pydantic BaseModel \u00b6 Methods: \u00b6 amis_json \u00b6 Returns model json data, using field aliases and excluding None . amis_dict \u00b6 Returns model dict data, using field aliases and excluding None . update_from_dict \u00b6 Update model data from dict . update_from_kwargs \u00b6 Update the model data with a list of kwargs parameters. AmisNode \u00b6 Reference: SchemaNode AmisAPI \u00b6 Reference: API Page \u00b6 Reference: Page Page App \u00b6 Reference: App multi-page application PageSchema \u00b6 Reference: App multi-page application Action \u00b6 Reference: Action Behavior Button Form \u00b6 Reference: Form Form FormItem \u00b6 Reference: FormItem General form item TableCRUD \u00b6 Reference: CRUD Add Delete Check , Table Table TableColumn \u00b6 Reference: Table Form components \u00b6 Reference: Component Introduction more \u00b6 Reference: Amis official documentation","title":"Types"},{"location":"amis/types/#baseamismodel","text":"","title":"BaseAmisModel"},{"location":"amis/types/#inherited-base-class","text":"","title":"Inherited base class"},{"location":"amis/types/#pydantic-basemodel","text":"","title":"Pydantic BaseModel"},{"location":"amis/types/#methods","text":"","title":"Methods:"},{"location":"amis/types/#amis_json","text":"Returns model json data, using field aliases and excluding None .","title":"amis_json"},{"location":"amis/types/#amis_dict","text":"Returns model dict data, using field aliases and excluding None .","title":"amis_dict"},{"location":"amis/types/#update_from_dict","text":"Update model data from dict .","title":"update_from_dict"},{"location":"amis/types/#update_from_kwargs","text":"Update the model data with a list of kwargs parameters.","title":"update_from_kwargs"},{"location":"amis/types/#amisnode","text":"Reference: SchemaNode","title":"AmisNode"},{"location":"amis/types/#amisapi","text":"Reference: API","title":"AmisAPI"},{"location":"amis/types/#page","text":"Reference: Page Page","title":"Page"},{"location":"amis/types/#app","text":"Reference: App multi-page application","title":"App"},{"location":"amis/types/#pageschema","text":"Reference: App multi-page application","title":"PageSchema"},{"location":"amis/types/#action","text":"Reference: Action Behavior Button","title":"Action"},{"location":"amis/types/#form","text":"Reference: Form Form","title":"Form"},{"location":"amis/types/#formitem","text":"Reference: FormItem General form item","title":"FormItem"},{"location":"amis/types/#tablecrud","text":"Reference: CRUD Add Delete Check , Table Table","title":"TableCRUD"},{"location":"amis/types/#tablecolumn","text":"Reference: Table Form","title":"TableColumn"},{"location":"amis/types/#components","text":"Reference: Component Introduction","title":"components"},{"location":"amis/types/#more","text":"Reference: Amis official documentation","title":"more"},{"location":"amis_admin/AdminApp/","text":"AdminApp \u00b6 AdminApp Inheritance base class \u00b6 PageAdmin \u00b6 Fields \u00b6 engine \u00b6 The current application sqlalchemy database engine, supports both synchronous and asynchronous engines. Reference: Asynchronous I/O (asyncio) - SQLAlchemy 1.4 Documentation Example: from sqlalchemy.ext.asyncio import create_async_engine engine = create_async_engine ( \"sqlite+aiosqlite:///amisadmin.db\" , future = True ) # engine = create_async_engine(\"mysql+aiomysql://amisadmin:amisadmin@127.0.0.1:3306/amisadmin?charset=utf8mb4\", future=True) # engine = create_async_engine(\"postgresql+asyncpg://user:pass@host/dbname\", future=True) db \u00b6 The current application is the sqlalchemy client, which supports either synchronous or asynchronous, i.e. AsyncDatabase or Database objects. Reference: AsyncDatabase site \u00b6 The site of the current application. Methods \u00b6 get_admin_or_create \u00b6 Returns or creates an instance of the admin class object. def get_admin_or_create ( self , admin_cls : Type [ _BaseAdminT ], register : bool = True ) -> Optional [ _BaseAdminT ] create_admin_instance_all \u00b6 Create all instances of the current application's administrative class objects def create_admin_instance_all ( self ) -> None get_model_admin \u00b6 Gets the instance of the model admin object corresponding to the current application database table. Must be set: `ModelAdmin.bind_model=True '' @lru_cache def get_model_admin ( self , table_name : str ) -> Optional [ ModelAdmin ] register_admin \u00b6 Register one or more BaseAdmin administrative classes to the current application object, and return the first class object. def register_admin ( self , * admin_cls : Type [ _BaseAdminT ]) -> Type [ _BaseAdminT ] unregister_admin \u00b6 Unregister one or more BaseAdmin administrative classes in the current application object. def unregister_admin ( self , * admin_cls : Type [ BaseAdmin ]) get_page \u00b6 Returns the current application page. if tabs_mode is not set, return amis App object. 2. if tabs_mode is set, return amis App object. if tabs_mode is set, the amis Page page with the body Tabs will be returned. Reference: App multi-page application Reference: Tabs tab async def get_page ( self , request : Request ) -> Union [ Page , App ]","title":"AdminApp"},{"location":"amis_admin/AdminApp/#adminapp","text":"AdminApp","title":"AdminApp"},{"location":"amis_admin/AdminApp/#inheritance-base-class","text":"","title":"Inheritance base class"},{"location":"amis_admin/AdminApp/#pageadmin","text":"","title":"PageAdmin"},{"location":"amis_admin/AdminApp/#fields","text":"","title":"Fields"},{"location":"amis_admin/AdminApp/#engine","text":"The current application sqlalchemy database engine, supports both synchronous and asynchronous engines. Reference: Asynchronous I/O (asyncio) - SQLAlchemy 1.4 Documentation Example: from sqlalchemy.ext.asyncio import create_async_engine engine = create_async_engine ( \"sqlite+aiosqlite:///amisadmin.db\" , future = True ) # engine = create_async_engine(\"mysql+aiomysql://amisadmin:amisadmin@127.0.0.1:3306/amisadmin?charset=utf8mb4\", future=True) # engine = create_async_engine(\"postgresql+asyncpg://user:pass@host/dbname\", future=True)","title":"engine"},{"location":"amis_admin/AdminApp/#db","text":"The current application is the sqlalchemy client, which supports either synchronous or asynchronous, i.e. AsyncDatabase or Database objects. Reference: AsyncDatabase","title":"db"},{"location":"amis_admin/AdminApp/#site","text":"The site of the current application.","title":"site"},{"location":"amis_admin/AdminApp/#methods","text":"","title":"Methods"},{"location":"amis_admin/AdminApp/#get_admin_or_create","text":"Returns or creates an instance of the admin class object. def get_admin_or_create ( self , admin_cls : Type [ _BaseAdminT ], register : bool = True ) -> Optional [ _BaseAdminT ]","title":"get_admin_or_create"},{"location":"amis_admin/AdminApp/#create_admin_instance_all","text":"Create all instances of the current application's administrative class objects def create_admin_instance_all ( self ) -> None","title":"create_admin_instance_all"},{"location":"amis_admin/AdminApp/#get_model_admin","text":"Gets the instance of the model admin object corresponding to the current application database table. Must be set: `ModelAdmin.bind_model=True '' @lru_cache def get_model_admin ( self , table_name : str ) -> Optional [ ModelAdmin ]","title":"get_model_admin"},{"location":"amis_admin/AdminApp/#register_admin","text":"Register one or more BaseAdmin administrative classes to the current application object, and return the first class object. def register_admin ( self , * admin_cls : Type [ _BaseAdminT ]) -> Type [ _BaseAdminT ]","title":"register_admin"},{"location":"amis_admin/AdminApp/#unregister_admin","text":"Unregister one or more BaseAdmin administrative classes in the current application object. def unregister_admin ( self , * admin_cls : Type [ BaseAdmin ])","title":"unregister_admin"},{"location":"amis_admin/AdminApp/#get_page","text":"Returns the current application page. if tabs_mode is not set, return amis App object. 2. if tabs_mode is set, return amis App object. if tabs_mode is set, the amis Page page with the body Tabs will be returned. Reference: App multi-page application Reference: Tabs tab async def get_page ( self , request : Request ) -> Union [ Page , App ]","title":"get_page"},{"location":"amis_admin/AdminGroup/","text":"AdminGroup \u00b6 Amis page group Inherited base class \u00b6 PageSchemaAdmin \u00b6 Fields \u00b6 _children \u00b6 List of child page properties for the current page group Methods \u00b6 get_page_schema_children \u00b6 Returns a list of child page attributes for the current page group. Permissions are filtered by the request parameter, and those without permissions are not included in the returned results. Reference: App multi-page application#property description async def get_page_schema_children ( self , request : Request ) -> List [ PageSchema ] append_child \u00b6 Add a navigation page. def append_child ( self , child : _PageSchemaAdminT , group_schema : PageSchema = None ) -> None get_page_schema_child \u00b6 Get page attributes by unique_id . def get_page_schema_child ( self , unique_id : str ) -> Optional [ _PageSchemaAdminT ] __iter__ \u00b6 Iterator for child pages within a group. def __iter__ ( self ) -> Iterator [ _PageSchemaAdminT ]: return self . _children . __iter__ ()","title":"AdminGroup"},{"location":"amis_admin/AdminGroup/#admingroup","text":"Amis page group","title":"AdminGroup"},{"location":"amis_admin/AdminGroup/#inherited-base-class","text":"","title":"Inherited base class"},{"location":"amis_admin/AdminGroup/#pageschemaadmin","text":"","title":"PageSchemaAdmin"},{"location":"amis_admin/AdminGroup/#fields","text":"","title":"Fields"},{"location":"amis_admin/AdminGroup/#_children","text":"List of child page properties for the current page group","title":"_children"},{"location":"amis_admin/AdminGroup/#methods","text":"","title":"Methods"},{"location":"amis_admin/AdminGroup/#get_page_schema_children","text":"Returns a list of child page attributes for the current page group. Permissions are filtered by the request parameter, and those without permissions are not included in the returned results. Reference: App multi-page application#property description async def get_page_schema_children ( self , request : Request ) -> List [ PageSchema ]","title":"get_page_schema_children"},{"location":"amis_admin/AdminGroup/#append_child","text":"Add a navigation page. def append_child ( self , child : _PageSchemaAdminT , group_schema : PageSchema = None ) -> None","title":"append_child"},{"location":"amis_admin/AdminGroup/#get_page_schema_child","text":"Get page attributes by unique_id . def get_page_schema_child ( self , unique_id : str ) -> Optional [ _PageSchemaAdminT ]","title":"get_page_schema_child"},{"location":"amis_admin/AdminGroup/#__iter__","text":"Iterator for child pages within a group. def __iter__ ( self ) -> Iterator [ _PageSchemaAdminT ]: return self . _children . __iter__ ()","title":"__iter__"},{"location":"amis_admin/AdminSite/","text":"BaseAdminSite \u00b6 Admin site base class Inherit base class \u00b6 AdminApp \u00b6 Fields \u00b6 settings \u00b6 Current admin site configuration settings Settings object. Reference: Settings /Settings) fastapi \u00b6 The FastAPI object that is currently mounted on the management site. Reference: https://fastapi.tiangolo.com/ Methods \u00b6 __init__ \u00b6 Initialize the management site. settings : Basic configuration of the management site fastapi : manages the site FastAPI application engine : manages the site's default database engine. def __init__ ( self , settings : Settings , fastapi : FastAPI = None , engine : AsyncEngine = None ) mount_app \u00b6 Mount the current management site to a FastAPI instance. def mount_app ( self , fastapi : FastAPI , name : str = None ) -> None AdminSite \u00b6 Admin Site AdminSite registers several administrative classes by default with respect to the base site: HomeAdmin, DocsAdmin, ReDocsAdmin, FileAdmin Inheritance of the base class \u00b6 BaseAdminSite \u00b6","title":"AdminSite"},{"location":"amis_admin/AdminSite/#baseadminsite","text":"Admin site base class","title":"BaseAdminSite"},{"location":"amis_admin/AdminSite/#inherit-base-class","text":"","title":"Inherit base class"},{"location":"amis_admin/AdminSite/#adminapp","text":"","title":"AdminApp"},{"location":"amis_admin/AdminSite/#fields","text":"","title":"Fields"},{"location":"amis_admin/AdminSite/#settings","text":"Current admin site configuration settings Settings object. Reference: Settings /Settings)","title":"settings"},{"location":"amis_admin/AdminSite/#fastapi","text":"The FastAPI object that is currently mounted on the management site. Reference: https://fastapi.tiangolo.com/","title":"fastapi"},{"location":"amis_admin/AdminSite/#methods","text":"","title":"Methods"},{"location":"amis_admin/AdminSite/#__init__","text":"Initialize the management site. settings : Basic configuration of the management site fastapi : manages the site FastAPI application engine : manages the site's default database engine. def __init__ ( self , settings : Settings , fastapi : FastAPI = None , engine : AsyncEngine = None )","title":"__init__"},{"location":"amis_admin/AdminSite/#mount_app","text":"Mount the current management site to a FastAPI instance. def mount_app ( self , fastapi : FastAPI , name : str = None ) -> None","title":"mount_app"},{"location":"amis_admin/AdminSite/#adminsite","text":"Admin Site AdminSite registers several administrative classes by default with respect to the base site: HomeAdmin, DocsAdmin, ReDocsAdmin, FileAdmin","title":"AdminSite"},{"location":"amis_admin/AdminSite/#inheritance-of-the-base-class","text":"","title":"Inheritance of the base class"},{"location":"amis_admin/AdminSite/#baseadminsite_1","text":"","title":"BaseAdminSite"},{"location":"amis_admin/BaseAdmin/","text":"BaseAdmin \u00b6 Page management base class fields \u00b6 app \u00b6 The application AdminApp object registered by the current admin object. Note that app is not the top level and may be registered by other AdminApp or AdminSite .) site \u00b6 The AdminSite site where the current management object is registered, the top-level Admin object. unique_id \u00b6 The unique ID of the current management object. Customizable settings, if not set, it will be automatically generated according to the default rules. Unique IDs should not change when a project is started or stopped, and should be unique per Admin class within a project. Admin ClassDiagram \u00b6 FastAPI-Amis-Admin core class diagram classDiagram %% admin class RouterMixin RouterMixin: +APIRouter router RouterAdmin --|> RouterMixin class BaseAdmin BaseAdmin: +AdminAPP app RouterAdmin --|> BaseAdmin PageSchemaAdmin --|> BaseAdmin PageSchemaAdmin: +PageSchema page_schema PageSchemaAdmin: +PageSchema group_schema LinkAdmin --|> PageSchemaAdmin IframeAdmin --|> PageSchemaAdmin IframeAdmin: +Iframe iframe PageAdmin --|> PageSchemaAdmin PageAdmin --|> RouterAdmin PageAdmin: +Page page BaseFormAdmin --|> PageAdmin BaseFormAdmin: +Form form BaseFormAdmin: +BaseModel schema FormAdmin --|> BaseFormAdmin TemplateAdmin --|> PageAdmin TemplateAdmin: +Jinja2Templates templates %% model ModelFormAdmin --|> FormAdmin ModelFormAdmin --|> SQLModelSelector ModelAction --|> BaseFormAdmin ModelAction --|> BaseModelAction ModelAction: +ModelAdmin admin ModelAction: +Action action class SQLModelSelector SQLModelSelector: +SQLModel model BaseCrud --|> RouterMixin SQLModelCrud ..|> BaseCrud SQLModelCrud --|> SQLModelSelector BaseModelAdmin --|> SQLModelCrud ModelAdmin --|> BaseModelAdmin ModelAdmin --|> PageAdmin %% group,app,site AdminGroup --|> PageSchemaAdmin AdminAPP --|> AdminGroup AdminAPP --|> PageAdmin AdminAPP: +AsyncDatabase db AdminAPP: +AdminSite site AdminSite --|> AdminAPP AdminSite: +FastAPI fastapi AdminSite: +Settings settings Admin & Amis \u00b6 fastapi-amis-admin class and amis component class diagram classDiagram AdminSite --> App App --|> AmisNode App *-- PageSchema PageSchema --|> AmisNode PageSchema *-- PageSchema AdminApp --> App AdminApp --> Tabs Tabs *-- TabsItem TabsItem --|> AmisNode Page --|> AmisNode PageAdmin --> Page Form --|> AmisNode FormItem --|> AmisNode Form *-- FormItem FormAdmin --> Form Table --|> AmisNode CRUD --|> AmisNode TableCRUD --|> Table TableCRUD --|> CRUD Table *-- TableColumn TableColumn --|> AmisNode Action --|> AmisNode ModelAction --> Form ModelAction --> Action ModelAdmin --> TableCRUD ModelAdmin --> Action","title":"BaseAdmin"},{"location":"amis_admin/BaseAdmin/#baseadmin","text":"Page management base class","title":"BaseAdmin"},{"location":"amis_admin/BaseAdmin/#fields","text":"","title":"fields"},{"location":"amis_admin/BaseAdmin/#app","text":"The application AdminApp object registered by the current admin object. Note that app is not the top level and may be registered by other AdminApp or AdminSite .)","title":"app"},{"location":"amis_admin/BaseAdmin/#site","text":"The AdminSite site where the current management object is registered, the top-level Admin object.","title":"site"},{"location":"amis_admin/BaseAdmin/#unique_id","text":"The unique ID of the current management object. Customizable settings, if not set, it will be automatically generated according to the default rules. Unique IDs should not change when a project is started or stopped, and should be unique per Admin class within a project.","title":"unique_id"},{"location":"amis_admin/BaseAdmin/#admin-classdiagram","text":"FastAPI-Amis-Admin core class diagram classDiagram %% admin class RouterMixin RouterMixin: +APIRouter router RouterAdmin --|> RouterMixin class BaseAdmin BaseAdmin: +AdminAPP app RouterAdmin --|> BaseAdmin PageSchemaAdmin --|> BaseAdmin PageSchemaAdmin: +PageSchema page_schema PageSchemaAdmin: +PageSchema group_schema LinkAdmin --|> PageSchemaAdmin IframeAdmin --|> PageSchemaAdmin IframeAdmin: +Iframe iframe PageAdmin --|> PageSchemaAdmin PageAdmin --|> RouterAdmin PageAdmin: +Page page BaseFormAdmin --|> PageAdmin BaseFormAdmin: +Form form BaseFormAdmin: +BaseModel schema FormAdmin --|> BaseFormAdmin TemplateAdmin --|> PageAdmin TemplateAdmin: +Jinja2Templates templates %% model ModelFormAdmin --|> FormAdmin ModelFormAdmin --|> SQLModelSelector ModelAction --|> BaseFormAdmin ModelAction --|> BaseModelAction ModelAction: +ModelAdmin admin ModelAction: +Action action class SQLModelSelector SQLModelSelector: +SQLModel model BaseCrud --|> RouterMixin SQLModelCrud ..|> BaseCrud SQLModelCrud --|> SQLModelSelector BaseModelAdmin --|> SQLModelCrud ModelAdmin --|> BaseModelAdmin ModelAdmin --|> PageAdmin %% group,app,site AdminGroup --|> PageSchemaAdmin AdminAPP --|> AdminGroup AdminAPP --|> PageAdmin AdminAPP: +AsyncDatabase db AdminAPP: +AdminSite site AdminSite --|> AdminAPP AdminSite: +FastAPI fastapi AdminSite: +Settings settings","title":"Admin ClassDiagram"},{"location":"amis_admin/BaseAdmin/#admin-amis","text":"fastapi-amis-admin class and amis component class diagram classDiagram AdminSite --> App App --|> AmisNode App *-- PageSchema PageSchema --|> AmisNode PageSchema *-- PageSchema AdminApp --> App AdminApp --> Tabs Tabs *-- TabsItem TabsItem --|> AmisNode Page --|> AmisNode PageAdmin --> Page Form --|> AmisNode FormItem --|> AmisNode Form *-- FormItem FormAdmin --> Form Table --|> AmisNode CRUD --|> AmisNode TableCRUD --|> Table TableCRUD --|> CRUD Table *-- TableColumn TableColumn --|> AmisNode Action --|> AmisNode ModelAction --> Form ModelAction --> Action ModelAdmin --> TableCRUD ModelAdmin --> Action","title":"Admin &amp; Amis"},{"location":"amis_admin/FormAdmin/","text":"BaseFormAdmin \u00b6 Form management base class Inherit from base class \u00b6 PageAdmin \u00b6 fields \u00b6 schema \u00b6 Form data model, must be set. schema_init_out \u00b6 Form initialization returns data model schema_submit_out \u00b6 Form submit returns data model form \u00b6 The current form amis Form object. Reference: Form Form form_path \u00b6 Form submission and initialization data interface api routing path. form_init \u00b6 Whether to enable form data initialization. Default: None , not enabled. route_init \u00b6 Initialize form routing route_submit \u00b6 submit form routing method \u00b6 get_form \u00b6 Get the current page Form object. async def get_form ( self , request : Request ) -> Form get_form_item \u00b6 Returns the amis FormItem object for the current page's form fields. Reference: FormItem common form item async def get_form_item ( self , request : Request , modelfield : ModelField ) -> Union [ FormItem , SchemaNode ] FormAdmin \u00b6 Form management Inherit from base class \u00b6 BaseFormAdmin \u00b6 method \u00b6 handle \u00b6 Handle page form submission data. request : The current request object. data : The form data model schema instance object submitted by the user. async def handle ( self , request : Request , data : BaseModel , ** kwargs ) -> BaseApiOut [ Any ] get_init_data \u00b6 Get page form initialization data. async def get_init_data ( self , request : Request , ** kwargs ) -> BaseApiOut [ Any ]","title":"FormAdmin"},{"location":"amis_admin/FormAdmin/#baseformadmin","text":"Form management base class","title":"BaseFormAdmin"},{"location":"amis_admin/FormAdmin/#inherit-from-base-class","text":"","title":"Inherit from base class"},{"location":"amis_admin/FormAdmin/#pageadmin","text":"","title":"PageAdmin"},{"location":"amis_admin/FormAdmin/#fields","text":"","title":"fields"},{"location":"amis_admin/FormAdmin/#schema","text":"Form data model, must be set.","title":"schema"},{"location":"amis_admin/FormAdmin/#schema_init_out","text":"Form initialization returns data model","title":"schema_init_out"},{"location":"amis_admin/FormAdmin/#schema_submit_out","text":"Form submit returns data model","title":"schema_submit_out"},{"location":"amis_admin/FormAdmin/#form","text":"The current form amis Form object. Reference: Form Form","title":"form"},{"location":"amis_admin/FormAdmin/#form_path","text":"Form submission and initialization data interface api routing path.","title":"form_path"},{"location":"amis_admin/FormAdmin/#form_init","text":"Whether to enable form data initialization. Default: None , not enabled.","title":"form_init"},{"location":"amis_admin/FormAdmin/#route_init","text":"Initialize form routing","title":"route_init"},{"location":"amis_admin/FormAdmin/#route_submit","text":"submit form routing","title":"route_submit"},{"location":"amis_admin/FormAdmin/#method","text":"","title":"method"},{"location":"amis_admin/FormAdmin/#get_form","text":"Get the current page Form object. async def get_form ( self , request : Request ) -> Form","title":"get_form"},{"location":"amis_admin/FormAdmin/#get_form_item","text":"Returns the amis FormItem object for the current page's form fields. Reference: FormItem common form item async def get_form_item ( self , request : Request , modelfield : ModelField ) -> Union [ FormItem , SchemaNode ]","title":"get_form_item"},{"location":"amis_admin/FormAdmin/#formadmin","text":"Form management","title":"FormAdmin"},{"location":"amis_admin/FormAdmin/#inherit-from-base-class_1","text":"","title":"Inherit from base class"},{"location":"amis_admin/FormAdmin/#baseformadmin_1","text":"","title":"BaseFormAdmin"},{"location":"amis_admin/FormAdmin/#method_1","text":"","title":"method"},{"location":"amis_admin/FormAdmin/#handle","text":"Handle page form submission data. request : The current request object. data : The form data model schema instance object submitted by the user. async def handle ( self , request : Request , data : BaseModel , ** kwargs ) -> BaseApiOut [ Any ]","title":"handle"},{"location":"amis_admin/FormAdmin/#get_init_data","text":"Get page form initialization data. async def get_init_data ( self , request : Request , ** kwargs ) -> BaseApiOut [ Any ]","title":"get_init_data"},{"location":"amis_admin/ModelAction/","text":"BaseModelAction \u00b6 Model management action base class fields \u00b6 admin \u00b6 The model management object to which the current action belongs. action \u00b6 The current action amis Action object. Reference: Action Action Button method \u00b6 register_router \u00b6 Register action routes. fetch_item_scalars \u00b6 Get option data. async def fetch_item_scalars ( self , item_id : List [ str ]) -> List [ BaseModel ]: stmt = select ( self . admin . model ) . where ( self . admin . pk . in_ ( item_id )) return await self . admin . db . async_execute ( stmt ) ModelAction \u00b6 Model management actions Inherit from base class \u00b6 BaseFormAdmin \u00b6 BaseModelAction \u00b6 fields \u00b6 schema \u00b6 Form data model, can be set to: None . method \u00b6 get_action \u00b6 Get the current action amis Action object. async def get_action ( self , request : Request , ** kwargs ) -> Action handle \u00b6 Process model action data. request : The current request object. item_id : A list of primary keys for model data selected by the user. data : Form data object if the action form data model schema is configured. None otherwise session : The asynchronous session of the database connection to which the current management model belongs. async def handle ( self , request : Request , item_id : List [ str ], data : Optional [ BaseModel ], ** quargs ) -> BaseApiOut [ Any ]","title":"ModelAction"},{"location":"amis_admin/ModelAction/#basemodelaction","text":"Model management action base class","title":"BaseModelAction"},{"location":"amis_admin/ModelAction/#fields","text":"","title":"fields"},{"location":"amis_admin/ModelAction/#admin","text":"The model management object to which the current action belongs.","title":"admin"},{"location":"amis_admin/ModelAction/#action","text":"The current action amis Action object. Reference: Action Action Button","title":"action"},{"location":"amis_admin/ModelAction/#method","text":"","title":"method"},{"location":"amis_admin/ModelAction/#register_router","text":"Register action routes.","title":"register_router"},{"location":"amis_admin/ModelAction/#fetch_item_scalars","text":"Get option data. async def fetch_item_scalars ( self , item_id : List [ str ]) -> List [ BaseModel ]: stmt = select ( self . admin . model ) . where ( self . admin . pk . in_ ( item_id )) return await self . admin . db . async_execute ( stmt )","title":"fetch_item_scalars"},{"location":"amis_admin/ModelAction/#modelaction","text":"Model management actions","title":"ModelAction"},{"location":"amis_admin/ModelAction/#inherit-from-base-class","text":"","title":"Inherit from base class"},{"location":"amis_admin/ModelAction/#baseformadmin","text":"","title":"BaseFormAdmin"},{"location":"amis_admin/ModelAction/#basemodelaction_1","text":"","title":"BaseModelAction"},{"location":"amis_admin/ModelAction/#fields_1","text":"","title":"fields"},{"location":"amis_admin/ModelAction/#schema","text":"Form data model, can be set to: None .","title":"schema"},{"location":"amis_admin/ModelAction/#method_1","text":"","title":"method"},{"location":"amis_admin/ModelAction/#get_action","text":"Get the current action amis Action object. async def get_action ( self , request : Request , ** kwargs ) -> Action","title":"get_action"},{"location":"amis_admin/ModelAction/#handle","text":"Process model action data. request : The current request object. item_id : A list of primary keys for model data selected by the user. data : Form data object if the action form data model schema is configured. None otherwise session : The asynchronous session of the database connection to which the current management model belongs. async def handle ( self , request : Request , item_id : List [ str ], data : Optional [ BaseModel ], ** quargs ) -> BaseApiOut [ Any ]","title":"handle"},{"location":"amis_admin/ModelAdmin/","text":"BaseModelAdmin \u00b6 Model management base class Inherit from base class \u00b6 SQLModelCrud \u00b6 fields \u00b6 list_display \u00b6 List of fields that need to be displayed for bulk query. Support SQLModel model field, SQLModel model, current model database table field name Support current model fields, and other model fields. Support amis type: TableColumn Support sqlalchemy Label type: can be constructed by LabelField method. For example: User.name.label('nickname') , LabelField(User.name.label('nickname'),Field(None,title='User nickname')) Default: self.schema_list.__fields__.values() list_filter \u00b6 Batch query filter form field list Support amis type: FormItem Support sqlalchemy Label type: can be constructed by LabelField method. Default: self.schema_filter.__fields__.values() list_per_page \u00b6 Batch query the amount of data per page, the default is: 15 search_fields \u00b6 A list of fields in the table that support text fuzzy search, the default is: [] update_fields \u00b6 A list of fields that can be edited in the table, the default is: [] bulk_update_fields \u00b6 A list of fields that support batch editing in the table, the default is: [] link_model_fields \u00b6 Batch query the field list of many-to-many associations that need to be linked, the default is: []. That is, the association list fields are not recognized by default. link_model_forms \u00b6 Batch query the many-to-many associated field form list that needs to be linked, which is generated by default based on self.link_model_fields . enable_bulk_create \u00b6 Whether to enable batch creation, the default is: False method \u00b6 get_list_display \u00b6 Returns the list of fields displayed by the table list. async def get_list_display ( self , request : Request ) -> List [ Union [ SQLModelListField , TableCRUD . Column ]] get_list_filter \u00b6 Returns the list of fields filtered by the table list query. async def get_list_filter ( self , request : Request ) -> List [ Union [ SQLModelListField , FormItem ]] get_list_column \u00b6 Returns the amis TableColumn object for the table column fields. Reference: Table table async def get_list_column ( self , request : Request , modelfield : ModelField ) -> TableColumn get_list_columns \u00b6 Returns a list of amis TableColumn objects for table column fields. async def get_list_columns ( self , request : Request ) -> List [ TableCRUD . Column ] get_list_filter_api \u00b6 Returns the AmisAPI object of the list filter filter form. async def get_list_filter_api ( self , request : Request ) -> AmisAPI get_list_table \u00b6 Returns the amis TableCRUD object of the page. Reference: CRUD CRUD , Table async def get_list_table ( self , request : Request ) -> TableCRUD get_form_item \u00b6 Returns the amis FormItem object of the page's form fields. Reference: FormItem ordinary form item (gitee.io) async def get_form_item ( self , request : Request , modelfield : ModelField , action : CrudEnum ) -> Union [ FormItem , SchemaNode ] get_form_item_on_foreign_key \u00b6 Returns the amis FormItem object for the foreign_key field of the page form. async def get_form_item_on_foreign_key ( self , modelfield : ModelField ) -> Union [ Service , SchemaNode ] get_link_model_forms \u00b6 Returns a many-to-many associated field form list. def get_link_model_forms ( self ) -> List [ LinkModelForm ] get_list_filter_form \u00b6 Return to list filter filter form. async def get_list_filter_form ( self , request : Request ) -> Form get_create_form \u00b6 Return to add model data form. async def get_create_form ( self , request : Request , bulk : bool = False ) -> Form get_update_form \u00b6 Return to update model data form. async def get_update_form ( self , request : Request , bulk : bool = False ) -> Form get_create_action \u00b6 Returns the amis Action object for the new model data to execute the action. Reference: Action Action Button async def get_create_action ( self , request : Request , bulk : bool = False ) -> Optional [ Action ] get_update_action \u00b6 Returns the amis Action object that updates the model data to perform the action. Reference: Action Action Button async def get_update_action ( self , request : Request , bulk : bool = False ) -> Optional [ Action ] get_delete_action \u00b6 Returns the amis Action object that deletes the model data to perform the action. Reference: Action Action Button async def get_delete_action ( self , request : Request , bulk : bool = False ) -> Optional [ Action ] get_actions_on_header_toolbar \u00b6 Return to the top toolbar of the list table to perform the action list. async def get_actions_on_header_toolbar ( self , request : Request ) -> List [ Action ] get_actions_on_item \u00b6 Return list table data single item operation to perform action list. async def get_actions_on_item ( self , request : Request ) -> List [ Action ] get_actions_on_bulk \u00b6 Return list table data batch operation to perform action list. async def get_actions_on_bulk ( self , request : Request ) -> List [ Action ] ModelAdmin \u00b6 Model management Inherit from base class \u00b6 PageAdmin \u00b6 BaseModelAdmin \u00b6 fields \u00b6 bind_model \u00b6 Whether to bind the model management page to the model, default: True If set to True , it can be obtained through AdminSite.get_model_admin . In models with foreign key associations, the default FormItem (TablePicker) will use the first management page corresponding to the bound model. ModelAdmin data control core field/method diagram \u00b6 A: always affects the final value. O?: Numerical? indicates priority. The construction scheme with the lowest numerical value is preferred as the final value. Self overridden by overload will be directly adopted as the final value. graph LR subgraph Read model--O1-->schema_read-->route_read:Response(ReadApiResponse) subgraph Selector model.->fields pk_name--A-->fields exclude--A-->fields end end subgraph Create schema_create-->get_create_form-->create_form(AmisCreateForm) create_fields--O1-->schema_create-->route_create-->create_api_body(CreateApiRequest) end subgraph Update schema_update-->get_update_form-->update_form(AmisUpdateForm) update_fields--O1-->schema_update-->route_update-->update_api_body(UpdateApiRequest) readonly_fields--A-->schema_update end subgraph List fields-->_select_entities-->get_select fields-->schema_list-->list_api_response(ListApiResponse) list_display-->get_list_display-->get_list_columns-->list_columns(AmisListColumns) subgraph route_list get_select calc_filter_clause schema_list schema_filter end list_display--A-->fields--O2-->list_filter-->_filter_entities-->calc_filter_clause list_display--O1-->list_filter-->schema_filter-->route_list_body(ListApiRequest) subgraph Filter search_fields--A-->list_filter-->get_list_filter-->get_list_filter_form-->list_filter_form(AmisListFilterForm) end end","title":"ModelAdmin"},{"location":"amis_admin/ModelAdmin/#basemodeladmin","text":"Model management base class","title":"BaseModelAdmin"},{"location":"amis_admin/ModelAdmin/#inherit-from-base-class","text":"","title":"Inherit from base class"},{"location":"amis_admin/ModelAdmin/#sqlmodelcrud","text":"","title":"SQLModelCrud"},{"location":"amis_admin/ModelAdmin/#fields","text":"","title":"fields"},{"location":"amis_admin/ModelAdmin/#list_display","text":"List of fields that need to be displayed for bulk query. Support SQLModel model field, SQLModel model, current model database table field name Support current model fields, and other model fields. Support amis type: TableColumn Support sqlalchemy Label type: can be constructed by LabelField method. For example: User.name.label('nickname') , LabelField(User.name.label('nickname'),Field(None,title='User nickname')) Default: self.schema_list.__fields__.values()","title":"list_display"},{"location":"amis_admin/ModelAdmin/#list_filter","text":"Batch query filter form field list Support amis type: FormItem Support sqlalchemy Label type: can be constructed by LabelField method. Default: self.schema_filter.__fields__.values()","title":"list_filter"},{"location":"amis_admin/ModelAdmin/#list_per_page","text":"Batch query the amount of data per page, the default is: 15","title":"list_per_page"},{"location":"amis_admin/ModelAdmin/#search_fields","text":"A list of fields in the table that support text fuzzy search, the default is: []","title":"search_fields"},{"location":"amis_admin/ModelAdmin/#update_fields","text":"A list of fields that can be edited in the table, the default is: []","title":"update_fields"},{"location":"amis_admin/ModelAdmin/#bulk_update_fields","text":"A list of fields that support batch editing in the table, the default is: []","title":"bulk_update_fields"},{"location":"amis_admin/ModelAdmin/#link_model_fields","text":"Batch query the field list of many-to-many associations that need to be linked, the default is: []. That is, the association list fields are not recognized by default.","title":"link_model_fields"},{"location":"amis_admin/ModelAdmin/#link_model_forms","text":"Batch query the many-to-many associated field form list that needs to be linked, which is generated by default based on self.link_model_fields .","title":"link_model_forms"},{"location":"amis_admin/ModelAdmin/#enable_bulk_create","text":"Whether to enable batch creation, the default is: False","title":"enable_bulk_create"},{"location":"amis_admin/ModelAdmin/#method","text":"","title":"method"},{"location":"amis_admin/ModelAdmin/#get_list_display","text":"Returns the list of fields displayed by the table list. async def get_list_display ( self , request : Request ) -> List [ Union [ SQLModelListField , TableCRUD . Column ]]","title":"get_list_display"},{"location":"amis_admin/ModelAdmin/#get_list_filter","text":"Returns the list of fields filtered by the table list query. async def get_list_filter ( self , request : Request ) -> List [ Union [ SQLModelListField , FormItem ]]","title":"get_list_filter"},{"location":"amis_admin/ModelAdmin/#get_list_column","text":"Returns the amis TableColumn object for the table column fields. Reference: Table table async def get_list_column ( self , request : Request , modelfield : ModelField ) -> TableColumn","title":"get_list_column"},{"location":"amis_admin/ModelAdmin/#get_list_columns","text":"Returns a list of amis TableColumn objects for table column fields. async def get_list_columns ( self , request : Request ) -> List [ TableCRUD . Column ]","title":"get_list_columns"},{"location":"amis_admin/ModelAdmin/#get_list_filter_api","text":"Returns the AmisAPI object of the list filter filter form. async def get_list_filter_api ( self , request : Request ) -> AmisAPI","title":"get_list_filter_api"},{"location":"amis_admin/ModelAdmin/#get_list_table","text":"Returns the amis TableCRUD object of the page. Reference: CRUD CRUD , Table async def get_list_table ( self , request : Request ) -> TableCRUD","title":"get_list_table"},{"location":"amis_admin/ModelAdmin/#get_form_item","text":"Returns the amis FormItem object of the page's form fields. Reference: FormItem ordinary form item (gitee.io) async def get_form_item ( self , request : Request , modelfield : ModelField , action : CrudEnum ) -> Union [ FormItem , SchemaNode ]","title":"get_form_item"},{"location":"amis_admin/ModelAdmin/#get_form_item_on_foreign_key","text":"Returns the amis FormItem object for the foreign_key field of the page form. async def get_form_item_on_foreign_key ( self , modelfield : ModelField ) -> Union [ Service , SchemaNode ]","title":"get_form_item_on_foreign_key"},{"location":"amis_admin/ModelAdmin/#get_link_model_forms","text":"Returns a many-to-many associated field form list. def get_link_model_forms ( self ) -> List [ LinkModelForm ]","title":"get_link_model_forms"},{"location":"amis_admin/ModelAdmin/#get_list_filter_form","text":"Return to list filter filter form. async def get_list_filter_form ( self , request : Request ) -> Form","title":"get_list_filter_form"},{"location":"amis_admin/ModelAdmin/#get_create_form","text":"Return to add model data form. async def get_create_form ( self , request : Request , bulk : bool = False ) -> Form","title":"get_create_form"},{"location":"amis_admin/ModelAdmin/#get_update_form","text":"Return to update model data form. async def get_update_form ( self , request : Request , bulk : bool = False ) -> Form","title":"get_update_form"},{"location":"amis_admin/ModelAdmin/#get_create_action","text":"Returns the amis Action object for the new model data to execute the action. Reference: Action Action Button async def get_create_action ( self , request : Request , bulk : bool = False ) -> Optional [ Action ]","title":"get_create_action"},{"location":"amis_admin/ModelAdmin/#get_update_action","text":"Returns the amis Action object that updates the model data to perform the action. Reference: Action Action Button async def get_update_action ( self , request : Request , bulk : bool = False ) -> Optional [ Action ]","title":"get_update_action"},{"location":"amis_admin/ModelAdmin/#get_delete_action","text":"Returns the amis Action object that deletes the model data to perform the action. Reference: Action Action Button async def get_delete_action ( self , request : Request , bulk : bool = False ) -> Optional [ Action ]","title":"get_delete_action"},{"location":"amis_admin/ModelAdmin/#get_actions_on_header_toolbar","text":"Return to the top toolbar of the list table to perform the action list. async def get_actions_on_header_toolbar ( self , request : Request ) -> List [ Action ]","title":"get_actions_on_header_toolbar"},{"location":"amis_admin/ModelAdmin/#get_actions_on_item","text":"Return list table data single item operation to perform action list. async def get_actions_on_item ( self , request : Request ) -> List [ Action ]","title":"get_actions_on_item"},{"location":"amis_admin/ModelAdmin/#get_actions_on_bulk","text":"Return list table data batch operation to perform action list. async def get_actions_on_bulk ( self , request : Request ) -> List [ Action ]","title":"get_actions_on_bulk"},{"location":"amis_admin/ModelAdmin/#modeladmin","text":"Model management","title":"ModelAdmin"},{"location":"amis_admin/ModelAdmin/#inherit-from-base-class_1","text":"","title":"Inherit from base class"},{"location":"amis_admin/ModelAdmin/#pageadmin","text":"","title":"PageAdmin"},{"location":"amis_admin/ModelAdmin/#basemodeladmin_1","text":"","title":"BaseModelAdmin"},{"location":"amis_admin/ModelAdmin/#fields_1","text":"","title":"fields"},{"location":"amis_admin/ModelAdmin/#bind_model","text":"Whether to bind the model management page to the model, default: True If set to True , it can be obtained through AdminSite.get_model_admin . In models with foreign key associations, the default FormItem (TablePicker) will use the first management page corresponding to the bound model.","title":"bind_model"},{"location":"amis_admin/ModelAdmin/#modeladmin-data-control-core-fieldmethod-diagram","text":"A: always affects the final value. O?: Numerical? indicates priority. The construction scheme with the lowest numerical value is preferred as the final value. Self overridden by overload will be directly adopted as the final value. graph LR subgraph Read model--O1-->schema_read-->route_read:Response(ReadApiResponse) subgraph Selector model.->fields pk_name--A-->fields exclude--A-->fields end end subgraph Create schema_create-->get_create_form-->create_form(AmisCreateForm) create_fields--O1-->schema_create-->route_create-->create_api_body(CreateApiRequest) end subgraph Update schema_update-->get_update_form-->update_form(AmisUpdateForm) update_fields--O1-->schema_update-->route_update-->update_api_body(UpdateApiRequest) readonly_fields--A-->schema_update end subgraph List fields-->_select_entities-->get_select fields-->schema_list-->list_api_response(ListApiResponse) list_display-->get_list_display-->get_list_columns-->list_columns(AmisListColumns) subgraph route_list get_select calc_filter_clause schema_list schema_filter end list_display--A-->fields--O2-->list_filter-->_filter_entities-->calc_filter_clause list_display--O1-->list_filter-->schema_filter-->route_list_body(ListApiRequest) subgraph Filter search_fields--A-->list_filter-->get_list_filter-->get_list_filter_form-->list_filter_form(AmisListFilterForm) end end","title":"ModelAdmin data control core field/method diagram"},{"location":"amis_admin/PageAdmin/","text":"PageAdmin \u00b6 Amis page management Inherit from base class \u00b6 PageSchemaAdmin \u00b6 RouterAdmin \u00b6 fields \u00b6 page \u00b6 Amis page displays the main Page object Reference: Page page_path \u00b6 Page path, the default is: class module name + class name page_response_mode \u00b6 page response type, default: json json : The response format is parsed as json. That is page.amis_dict() html : The response format is parsed as amis html. That is page.amis_html() page_route_kwargs \u00b6 page additional parameters template_name \u00b6 Page rendering template name. route_page \u00b6 Page routing function @property def route_page ( self ) -> Callable method \u00b6 page_permission_depend \u00b6 The current page routing permission detection dependency. async def page_permission_depend ( self , request : Request ) -> bool get_page \u00b6 Get the amis page Page object. async def get_page ( self , request : Request ) -> Page page_parser \u00b6 Parse the Page object into response data. def page_parser ( self , request : Request , page : Page ) -> Response","title":"PageAdmin"},{"location":"amis_admin/PageAdmin/#pageadmin","text":"Amis page management","title":"PageAdmin"},{"location":"amis_admin/PageAdmin/#inherit-from-base-class","text":"","title":"Inherit from base class"},{"location":"amis_admin/PageAdmin/#pageschemaadmin","text":"","title":"PageSchemaAdmin"},{"location":"amis_admin/PageAdmin/#routeradmin","text":"","title":"RouterAdmin"},{"location":"amis_admin/PageAdmin/#fields","text":"","title":"fields"},{"location":"amis_admin/PageAdmin/#page","text":"Amis page displays the main Page object Reference: Page","title":"page"},{"location":"amis_admin/PageAdmin/#page_path","text":"Page path, the default is: class module name + class name","title":"page_path"},{"location":"amis_admin/PageAdmin/#page_response_mode","text":"page response type, default: json json : The response format is parsed as json. That is page.amis_dict() html : The response format is parsed as amis html. That is page.amis_html()","title":"page_response_mode"},{"location":"amis_admin/PageAdmin/#page_route_kwargs","text":"page additional parameters","title":"page_route_kwargs"},{"location":"amis_admin/PageAdmin/#template_name","text":"Page rendering template name.","title":"template_name"},{"location":"amis_admin/PageAdmin/#route_page","text":"Page routing function @property def route_page ( self ) -> Callable","title":"route_page"},{"location":"amis_admin/PageAdmin/#method","text":"","title":"method"},{"location":"amis_admin/PageAdmin/#page_permission_depend","text":"The current page routing permission detection dependency. async def page_permission_depend ( self , request : Request ) -> bool","title":"page_permission_depend"},{"location":"amis_admin/PageAdmin/#get_page","text":"Get the amis page Page object. async def get_page ( self , request : Request ) -> Page","title":"get_page"},{"location":"amis_admin/PageAdmin/#page_parser","text":"Parse the Page object into response data. def page_parser ( self , request : Request , page : Page ) -> Response","title":"page_parser"},{"location":"amis_admin/PageSchemaAdmin/","text":"PageSchemaAdmin \u00b6 Navigation page management base class Inherit from base class \u00b6 BaseAdmin \u00b6 fields \u00b6 group_schema \u00b6 Information of the group where the current page menu navigation is located page_schema \u00b6 Current page menu navigation information.If None, it will not be displayed in the menu navigation. method \u00b6 has_page_permission \u00b6 Controls whether the user has permission to access the current page, the default return: True async def has_page_permission ( self , request : Request ) -> bool : return True error_no_page_permission \u00b6 The current page has no access permission error def error_no_page_permission ( self , request : Request ): raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = 'No page permissions' ) get_page_schema \u00b6 Return to the current page navigation information def get_page_schema ( self ) -> Optional [ PageSchema ] get_group_schema \u00b6 Returns the group information of the current page navigation def get_group_schema ( self ) -> Optional [ PageSchema ] LinkAdmin \u00b6 Link management Inherit from base class \u00b6 PageSchemaAdmin \u00b6 fields \u00b6 link \u00b6 Jump links. IframeAdmin \u00b6 iframe management Inherit from base class \u00b6 PageSchemaAdmin \u00b6 fields \u00b6 src \u00b6 iframe link. iframe \u00b6 Inline frame Amis Iframe object. \u53c2\u8003: iFrame","title":"PageSchemaAdmin"},{"location":"amis_admin/PageSchemaAdmin/#pageschemaadmin","text":"Navigation page management base class","title":"PageSchemaAdmin"},{"location":"amis_admin/PageSchemaAdmin/#inherit-from-base-class","text":"","title":"Inherit from base class"},{"location":"amis_admin/PageSchemaAdmin/#baseadmin","text":"","title":"BaseAdmin"},{"location":"amis_admin/PageSchemaAdmin/#fields","text":"","title":"fields"},{"location":"amis_admin/PageSchemaAdmin/#group_schema","text":"Information of the group where the current page menu navigation is located","title":"group_schema"},{"location":"amis_admin/PageSchemaAdmin/#page_schema","text":"Current page menu navigation information.If None, it will not be displayed in the menu navigation.","title":"page_schema"},{"location":"amis_admin/PageSchemaAdmin/#method","text":"","title":"method"},{"location":"amis_admin/PageSchemaAdmin/#has_page_permission","text":"Controls whether the user has permission to access the current page, the default return: True async def has_page_permission ( self , request : Request ) -> bool : return True","title":"has_page_permission"},{"location":"amis_admin/PageSchemaAdmin/#error_no_page_permission","text":"The current page has no access permission error def error_no_page_permission ( self , request : Request ): raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = 'No page permissions' )","title":"error_no_page_permission"},{"location":"amis_admin/PageSchemaAdmin/#get_page_schema","text":"Return to the current page navigation information def get_page_schema ( self ) -> Optional [ PageSchema ]","title":"get_page_schema"},{"location":"amis_admin/PageSchemaAdmin/#get_group_schema","text":"Returns the group information of the current page navigation def get_group_schema ( self ) -> Optional [ PageSchema ]","title":"get_group_schema"},{"location":"amis_admin/PageSchemaAdmin/#linkadmin","text":"Link management","title":"LinkAdmin"},{"location":"amis_admin/PageSchemaAdmin/#inherit-from-base-class_1","text":"","title":"Inherit from base class"},{"location":"amis_admin/PageSchemaAdmin/#pageschemaadmin_1","text":"","title":"PageSchemaAdmin"},{"location":"amis_admin/PageSchemaAdmin/#fields_1","text":"","title":"fields"},{"location":"amis_admin/PageSchemaAdmin/#link","text":"Jump links.","title":"link"},{"location":"amis_admin/PageSchemaAdmin/#iframeadmin","text":"iframe management","title":"IframeAdmin"},{"location":"amis_admin/PageSchemaAdmin/#inherit-from-base-class_2","text":"","title":"Inherit from base class"},{"location":"amis_admin/PageSchemaAdmin/#pageschemaadmin_2","text":"","title":"PageSchemaAdmin"},{"location":"amis_admin/PageSchemaAdmin/#fields_2","text":"","title":"fields"},{"location":"amis_admin/PageSchemaAdmin/#src","text":"iframe link.","title":"src"},{"location":"amis_admin/PageSchemaAdmin/#iframe","text":"Inline frame Amis Iframe object. \u53c2\u8003: iFrame","title":"iframe"},{"location":"amis_admin/RouterAdmin/","text":"RouterAdmin \u00b6 Route registration management base class Inherit from base class \u00b6 BaseAdmin \u00b6 RouterMixin \u00b6 Derived subclass \u00b6 PageAdmin fields \u00b6 router_path \u00b6 current route registrar, base path method \u00b6 register_router \u00b6 Registration page routing.","title":"RouterAdmin"},{"location":"amis_admin/RouterAdmin/#routeradmin","text":"Route registration management base class","title":"RouterAdmin"},{"location":"amis_admin/RouterAdmin/#inherit-from-base-class","text":"","title":"Inherit from base class"},{"location":"amis_admin/RouterAdmin/#baseadmin","text":"","title":"BaseAdmin"},{"location":"amis_admin/RouterAdmin/#routermixin","text":"","title":"RouterMixin"},{"location":"amis_admin/RouterAdmin/#derived-subclass","text":"PageAdmin","title":"Derived subclass"},{"location":"amis_admin/RouterAdmin/#fields","text":"","title":"fields"},{"location":"amis_admin/RouterAdmin/#router_path","text":"current route registrar, base path","title":"router_path"},{"location":"amis_admin/RouterAdmin/#method","text":"","title":"method"},{"location":"amis_admin/RouterAdmin/#register_router","text":"Registration page routing.","title":"register_router"},{"location":"amis_admin/Settings/","text":"Settings \u00b6 Site Settings Inherit from base class \u00b6 Pydantic BaseSettings \u00b6 fields \u00b6 debug \u00b6 Whether to enable management site debugging. Default: False site_title \u00b6 Current admin site title site_icon \u00b6 Current management site ICON site_url \u00b6 current admin site url root_path \u00b6 The path where the current management site is mounted under the FastAPI instance. database_url_async \u00b6 Current admin site sqlalchemy database engine asynchronous connection url. database_url \u00b6 Current admin site sqlalchemy database engine sync connection url. language \u00b6 The international language used by the current management site project. The system default built-in supported languages \u200b\u200bare: en_US , zh_CN Starting from version 0.1.1, try to set environment variables LANGUAGE / LANG > OS default language > English en_US Note: Setting this value does not directly switch the language, please refer to the tutorial ( Multilingual ) to switch the language environment. amis_cdn \u00b6 CDN address of the current management site Amis page, for example: https://npm.elemecdn.com Default: https://unpkg.com amis_pkg \u00b6 Current admin site Amis version, eg: amis@beta , amis@1.9.0 Default: amis@1.10.1 The default value may change after each release of FastAPI-Amis-Admin , it is recommended that projects set their own stable Amis version. amis_theme \u00b6 current admin site Amis template theme, optional: cxd , antd Default: cxd logger \u00b6 Currently admin site logger, supports: logging , loguru Default: logging.getLogger(\"fastapi_amis_admin\")","title":"Settings"},{"location":"amis_admin/Settings/#settings","text":"Site Settings","title":"Settings"},{"location":"amis_admin/Settings/#inherit-from-base-class","text":"","title":"Inherit from base class"},{"location":"amis_admin/Settings/#pydantic-basesettings","text":"","title":"Pydantic BaseSettings"},{"location":"amis_admin/Settings/#fields","text":"","title":"fields"},{"location":"amis_admin/Settings/#debug","text":"Whether to enable management site debugging. Default: False","title":"debug"},{"location":"amis_admin/Settings/#site_title","text":"Current admin site title","title":"site_title"},{"location":"amis_admin/Settings/#site_icon","text":"Current management site ICON","title":"site_icon"},{"location":"amis_admin/Settings/#site_url","text":"current admin site url","title":"site_url"},{"location":"amis_admin/Settings/#root_path","text":"The path where the current management site is mounted under the FastAPI instance.","title":"root_path"},{"location":"amis_admin/Settings/#database_url_async","text":"Current admin site sqlalchemy database engine asynchronous connection url.","title":"database_url_async"},{"location":"amis_admin/Settings/#database_url","text":"Current admin site sqlalchemy database engine sync connection url.","title":"database_url"},{"location":"amis_admin/Settings/#language","text":"The international language used by the current management site project. The system default built-in supported languages \u200b\u200bare: en_US , zh_CN Starting from version 0.1.1, try to set environment variables LANGUAGE / LANG > OS default language > English en_US Note: Setting this value does not directly switch the language, please refer to the tutorial ( Multilingual ) to switch the language environment.","title":"language"},{"location":"amis_admin/Settings/#amis_cdn","text":"CDN address of the current management site Amis page, for example: https://npm.elemecdn.com Default: https://unpkg.com","title":"amis_cdn"},{"location":"amis_admin/Settings/#amis_pkg","text":"Current admin site Amis version, eg: amis@beta , amis@1.9.0 Default: amis@1.10.1 The default value may change after each release of FastAPI-Amis-Admin , it is recommended that projects set their own stable Amis version.","title":"amis_pkg"},{"location":"amis_admin/Settings/#amis_theme","text":"current admin site Amis template theme, optional: cxd , antd Default: cxd","title":"amis_theme"},{"location":"amis_admin/Settings/#logger","text":"Currently admin site logger, supports: logging , loguru Default: logging.getLogger(\"fastapi_amis_admin\")","title":"logger"},{"location":"amis_admin/TemplateAdmin/","text":"TemplateAdmin \u00b6 Jinja2 rendering template management Reference: Jinja Inherit from base class \u00b6 PageAdmin \u00b6 fields \u00b6 page \u00b6 The current page context context dictionary. templates \u00b6 Jinja2Templates template renderer method \u00b6 get_page \u00b6 Get the context dictionary of the current page context. async def get_page ( self , request : Request ) -> Dict [ str , Any ] page_parser \u00b6 Parse the page dictionary into response data. def page_parser ( self , request : Request , page : Dict [ str , Any ]) -> Response : page . update ({ 'request' : request }) return self . templates . TemplateResponse ( self . template_name , page )","title":"TemplateAdmin"},{"location":"amis_admin/TemplateAdmin/#templateadmin","text":"Jinja2 rendering template management Reference: Jinja","title":"TemplateAdmin"},{"location":"amis_admin/TemplateAdmin/#inherit-from-base-class","text":"","title":"Inherit from base class"},{"location":"amis_admin/TemplateAdmin/#pageadmin","text":"","title":"PageAdmin"},{"location":"amis_admin/TemplateAdmin/#fields","text":"","title":"fields"},{"location":"amis_admin/TemplateAdmin/#page","text":"The current page context context dictionary.","title":"page"},{"location":"amis_admin/TemplateAdmin/#templates","text":"Jinja2Templates template renderer","title":"templates"},{"location":"amis_admin/TemplateAdmin/#method","text":"","title":"method"},{"location":"amis_admin/TemplateAdmin/#get_page","text":"Get the context dictionary of the current page context. async def get_page ( self , request : Request ) -> Dict [ str , Any ]","title":"get_page"},{"location":"amis_admin/TemplateAdmin/#page_parser","text":"Parse the page dictionary into response data. def page_parser ( self , request : Request , page : Dict [ str , Any ]) -> Response : page . update ({ 'request' : request }) return self . templates . TemplateResponse ( self . template_name , page )","title":"page_parser"},{"location":"crud/BaseCrud/","text":"BaseCrud \u00b6 FastAPICrud route registrar base class Inherit from base class \u00b6 RouterMixin \u00b6 Derived subclass \u00b6 SQLModelCrud \u00b6 Other ORM backends are not supported yet, SQLModel is powerful enough... fields \u00b6 schema_model \u00b6 Current model agreement schema_list \u00b6 Batch query data return protocol, default: self.schema_model schema_filter \u00b6 Batch query data filter submission protocol, default: self.schema_model schema_create \u00b6 Create data submission protocol, default: self.schema_model schema_read \u00b6 read data return protocol, default: self.schema_model schema_update \u00b6 Update data submission protocol, default: self.schema_model pk_name \u00b6 current model primary key string, default: id . Description: Database table has and can only have one self-incrementing primary key . (To be expanded) list_per_page_max \u00b6 The maximum number of data per page to be read in batches. Default: None, no limit. route_list \u00b6 Bulk read routing functions. Supports sync/async functions. @property def route_list ( self ) -> Callable route_read \u00b6 Single item/batch read routing function. Support synchronous/asynchronous functions. @property def route_read ( self ) -> Callable route_create \u00b6 Single/batch create routing functions. Support synchronous/asynchronous functions. @property def route_create ( self ) -> Callable route_update \u00b6 Single/batch update routing functions. Support synchronous/asynchronous functions. @property def route_update ( self ) -> Callable route_delete \u00b6 Single item/batch delete routing function. Support synchronous/asynchronous function. @property def route_delete ( self ) -> Callable method: \u00b6 has_list_permission \u00b6 Check if you have batch query permission. async def has_list_permission ( self , request : Request , paginator : Optional [ Paginator ], filter : Optional [ SchemaFilterT ], ** kwargs ) -> bool has_read_permission \u00b6 Check if you have single query permission. async def has_read_permission ( self , request : Request , item_id : Optional [ List [ str ]], ** kwargs ) -> bool has_create_permission \u00b6 Check if you have permission to create data. async def has_create_permission ( self , request : Request , obj : Optional [ SchemaCreateT ], ** kwargs ) -> bool has_update_permission \u00b6 Check if you have permission to update data. async def has_update_permission ( self , request : Request , item_id : Optional [ List [ str ]], obj : Optional [ SchemaUpdateT ], ** kwargs ) -> bool has_delete_permission \u00b6 Check if you have permission to delete data. async def has_delete_permission ( self , request : Request , item_id : Optional [ List [ str ]], ** kwargs ) -> bool : return True register_crud \u00b6 Register Crud routing. def register_crud ( self , schema_list : Type [ SchemaListT ] = None , schema_filter : Type [ SchemaFilterT ] = None , schema_create : Type [ SchemaCreateT ] = None , schema_read : Type [ SchemaReadT ] = None , schema_update : Type [ SchemaUpdateT ] = None , list_max_per_page : int = None , depends_list : List [ Depends ] = None , depends_read : List [ Depends ] = None , depends_create : List [ Depends ] = None , depends_update : List [ Depends ] = None , depends_delete : List [ Depends ] = None ) -> \"BaseCrud\"","title":"BaseCrud"},{"location":"crud/BaseCrud/#basecrud","text":"FastAPICrud route registrar base class","title":"BaseCrud"},{"location":"crud/BaseCrud/#inherit-from-base-class","text":"","title":"Inherit from base class"},{"location":"crud/BaseCrud/#routermixin","text":"","title":"RouterMixin"},{"location":"crud/BaseCrud/#derived-subclass","text":"","title":"Derived subclass"},{"location":"crud/BaseCrud/#sqlmodelcrud","text":"Other ORM backends are not supported yet, SQLModel is powerful enough...","title":"SQLModelCrud"},{"location":"crud/BaseCrud/#fields","text":"","title":"fields"},{"location":"crud/BaseCrud/#schema_model","text":"Current model agreement","title":"schema_model"},{"location":"crud/BaseCrud/#schema_list","text":"Batch query data return protocol, default: self.schema_model","title":"schema_list"},{"location":"crud/BaseCrud/#schema_filter","text":"Batch query data filter submission protocol, default: self.schema_model","title":"schema_filter"},{"location":"crud/BaseCrud/#schema_create","text":"Create data submission protocol, default: self.schema_model","title":"schema_create"},{"location":"crud/BaseCrud/#schema_read","text":"read data return protocol, default: self.schema_model","title":"schema_read"},{"location":"crud/BaseCrud/#schema_update","text":"Update data submission protocol, default: self.schema_model","title":"schema_update"},{"location":"crud/BaseCrud/#pk_name","text":"current model primary key string, default: id . Description: Database table has and can only have one self-incrementing primary key . (To be expanded)","title":"pk_name"},{"location":"crud/BaseCrud/#list_per_page_max","text":"The maximum number of data per page to be read in batches. Default: None, no limit.","title":"list_per_page_max"},{"location":"crud/BaseCrud/#route_list","text":"Bulk read routing functions. Supports sync/async functions. @property def route_list ( self ) -> Callable","title":"route_list"},{"location":"crud/BaseCrud/#route_read","text":"Single item/batch read routing function. Support synchronous/asynchronous functions. @property def route_read ( self ) -> Callable","title":"route_read"},{"location":"crud/BaseCrud/#route_create","text":"Single/batch create routing functions. Support synchronous/asynchronous functions. @property def route_create ( self ) -> Callable","title":"route_create"},{"location":"crud/BaseCrud/#route_update","text":"Single/batch update routing functions. Support synchronous/asynchronous functions. @property def route_update ( self ) -> Callable","title":"route_update"},{"location":"crud/BaseCrud/#route_delete","text":"Single item/batch delete routing function. Support synchronous/asynchronous function. @property def route_delete ( self ) -> Callable","title":"route_delete"},{"location":"crud/BaseCrud/#method","text":"","title":"method:"},{"location":"crud/BaseCrud/#has_list_permission","text":"Check if you have batch query permission. async def has_list_permission ( self , request : Request , paginator : Optional [ Paginator ], filter : Optional [ SchemaFilterT ], ** kwargs ) -> bool","title":"has_list_permission"},{"location":"crud/BaseCrud/#has_read_permission","text":"Check if you have single query permission. async def has_read_permission ( self , request : Request , item_id : Optional [ List [ str ]], ** kwargs ) -> bool","title":"has_read_permission"},{"location":"crud/BaseCrud/#has_create_permission","text":"Check if you have permission to create data. async def has_create_permission ( self , request : Request , obj : Optional [ SchemaCreateT ], ** kwargs ) -> bool","title":"has_create_permission"},{"location":"crud/BaseCrud/#has_update_permission","text":"Check if you have permission to update data. async def has_update_permission ( self , request : Request , item_id : Optional [ List [ str ]], obj : Optional [ SchemaUpdateT ], ** kwargs ) -> bool","title":"has_update_permission"},{"location":"crud/BaseCrud/#has_delete_permission","text":"Check if you have permission to delete data. async def has_delete_permission ( self , request : Request , item_id : Optional [ List [ str ]], ** kwargs ) -> bool : return True","title":"has_delete_permission"},{"location":"crud/BaseCrud/#register_crud","text":"Register Crud routing. def register_crud ( self , schema_list : Type [ SchemaListT ] = None , schema_filter : Type [ SchemaFilterT ] = None , schema_create : Type [ SchemaCreateT ] = None , schema_read : Type [ SchemaReadT ] = None , schema_update : Type [ SchemaUpdateT ] = None , list_max_per_page : int = None , depends_list : List [ Depends ] = None , depends_read : List [ Depends ] = None , depends_create : List [ Depends ] = None , depends_update : List [ Depends ] = None , depends_delete : List [ Depends ] = None ) -> \"BaseCrud\"","title":"register_crud"},{"location":"crud/RouterMixin/","text":"RouterMixin \u00b6 FastAPI Route Registrar fields \u00b6 router \u00b6 Route Registrar router_prefix \u00b6 route registrar prefix router_permission_depend \u00b6 Route registrar permission control dependency method: \u00b6 get_router \u00b6 Returns the current route registrar. def get_router ( self ) -> APIRouter error_no_router_permission \u00b6 No routing permission error. def error_no_router_permission ( self , request : Request )","title":"RouterMixin"},{"location":"crud/RouterMixin/#routermixin","text":"FastAPI Route Registrar","title":"RouterMixin"},{"location":"crud/RouterMixin/#fields","text":"","title":"fields"},{"location":"crud/RouterMixin/#router","text":"Route Registrar","title":"router"},{"location":"crud/RouterMixin/#router_prefix","text":"route registrar prefix","title":"router_prefix"},{"location":"crud/RouterMixin/#router_permission_depend","text":"Route registrar permission control dependency","title":"router_permission_depend"},{"location":"crud/RouterMixin/#method","text":"","title":"method:"},{"location":"crud/RouterMixin/#get_router","text":"Returns the current route registrar. def get_router ( self ) -> APIRouter","title":"get_router"},{"location":"crud/RouterMixin/#error_no_router_permission","text":"No routing permission error. def error_no_router_permission ( self , request : Request )","title":"error_no_router_permission"},{"location":"crud/SQLModelCrud/","text":"SQLModelSelector \u00b6 SQLModel selector fields \u00b6 model \u00b6 Current SQLModel ORM model, must be set. fields \u00b6 Query field list. Support SQLModel model field, SQLModel model, current model database table field name Support current model fields, and other model fields. Default: self.model exclude \u00b6 A list of excluded fields. A list of fields to exclude from the current model. Support current SQLModel model field, current model database table field name Default: [] ordering \u00b6 Selector to sort field list. Default: [] link_models \u00b6 Link model dictionary. It is more complicated, and the detailed analysis needs to be improved. pk_name \u00b6 current model primary key string, default: id . Description: Database table has and can only have one self-incrementing primary key . (To be expanded) pk \u00b6 The current model primary key sqlalchemy InstrumentedAttribute. parser \u00b6 The current model field resolver. Reference: SQLModelFieldParser _list_fields_ins \u00b6 Batch query sqlalchemy field list. method: \u00b6 get_select \u00b6 Returns the SQLModel selector. def get_select ( self , request : Request ) -> Select calc_filter_clause \u00b6 Calculate query filter conditions. def calc_filter_clause ( self , data : Dict [ str , Any ] ) -> List [ BinaryExpression ] SQLModelCrud \u00b6 SQLModel ORM Crud Registrar Inherit from base class \u00b6 BaseCrud \u00b6 SQLModelSelector \u00b6 fields \u00b6 engine \u00b6 sqlalchemy connection engine, must be set. readonly_fields \u00b6 Read-only field list: Support SQLModel model field, SQLModel model, current model database table field name Support current model fields, and other model fields. Default: [] method: \u00b6 get_select \u00b6 Returns the SQLModel selector. def get_select ( self , request : Request ) -> Select on_create_pre \u00b6 Returns the processed data of the create request. async def on_create_pre ( self , request : Request , obj : SchemaCreateT , ** kwargs ) -> Dict [ str , Any ] on_update_pre \u00b6 Returns the data after the update request has been processed. async def on_update_pre ( self , request : Request , obj : SchemaUpdateT , item_id : Union [ List [ str ], List [ int ]], ** kwargs ) -> Dict [ str , Any ] on_filter_pre \u00b6 Returns the data processed by the batch query request submission filter. async def on_filter_pre ( self , request : Request , obj : SchemaFilterT , ** kwargs ) -> Dict [ str , Any ]","title":"SQLModelCrud"},{"location":"crud/SQLModelCrud/#sqlmodelselector","text":"SQLModel selector","title":"SQLModelSelector"},{"location":"crud/SQLModelCrud/#fields","text":"","title":"fields"},{"location":"crud/SQLModelCrud/#model","text":"Current SQLModel ORM model, must be set.","title":"model"},{"location":"crud/SQLModelCrud/#fields_1","text":"Query field list. Support SQLModel model field, SQLModel model, current model database table field name Support current model fields, and other model fields. Default: self.model","title":"fields"},{"location":"crud/SQLModelCrud/#exclude","text":"A list of excluded fields. A list of fields to exclude from the current model. Support current SQLModel model field, current model database table field name Default: []","title":"exclude"},{"location":"crud/SQLModelCrud/#ordering","text":"Selector to sort field list. Default: []","title":"ordering"},{"location":"crud/SQLModelCrud/#link_models","text":"Link model dictionary. It is more complicated, and the detailed analysis needs to be improved.","title":"link_models"},{"location":"crud/SQLModelCrud/#pk_name","text":"current model primary key string, default: id . Description: Database table has and can only have one self-incrementing primary key . (To be expanded)","title":"pk_name"},{"location":"crud/SQLModelCrud/#pk","text":"The current model primary key sqlalchemy InstrumentedAttribute.","title":"pk"},{"location":"crud/SQLModelCrud/#parser","text":"The current model field resolver. Reference: SQLModelFieldParser","title":"parser"},{"location":"crud/SQLModelCrud/#_list_fields_ins","text":"Batch query sqlalchemy field list.","title":"_list_fields_ins"},{"location":"crud/SQLModelCrud/#method","text":"","title":"method:"},{"location":"crud/SQLModelCrud/#get_select","text":"Returns the SQLModel selector. def get_select ( self , request : Request ) -> Select","title":"get_select"},{"location":"crud/SQLModelCrud/#calc_filter_clause","text":"Calculate query filter conditions. def calc_filter_clause ( self , data : Dict [ str , Any ] ) -> List [ BinaryExpression ]","title":"calc_filter_clause"},{"location":"crud/SQLModelCrud/#sqlmodelcrud","text":"SQLModel ORM Crud Registrar","title":"SQLModelCrud"},{"location":"crud/SQLModelCrud/#inherit-from-base-class","text":"","title":"Inherit from base class"},{"location":"crud/SQLModelCrud/#basecrud","text":"","title":"BaseCrud"},{"location":"crud/SQLModelCrud/#sqlmodelselector_1","text":"","title":"SQLModelSelector"},{"location":"crud/SQLModelCrud/#fields_2","text":"","title":"fields"},{"location":"crud/SQLModelCrud/#engine","text":"sqlalchemy connection engine, must be set.","title":"engine"},{"location":"crud/SQLModelCrud/#readonly_fields","text":"Read-only field list: Support SQLModel model field, SQLModel model, current model database table field name Support current model fields, and other model fields. Default: []","title":"readonly_fields"},{"location":"crud/SQLModelCrud/#method_1","text":"","title":"method:"},{"location":"crud/SQLModelCrud/#get_select_1","text":"Returns the SQLModel selector. def get_select ( self , request : Request ) -> Select","title":"get_select"},{"location":"crud/SQLModelCrud/#on_create_pre","text":"Returns the processed data of the create request. async def on_create_pre ( self , request : Request , obj : SchemaCreateT , ** kwargs ) -> Dict [ str , Any ]","title":"on_create_pre"},{"location":"crud/SQLModelCrud/#on_update_pre","text":"Returns the data after the update request has been processed. async def on_update_pre ( self , request : Request , obj : SchemaUpdateT , item_id : Union [ List [ str ], List [ int ]], ** kwargs ) -> Dict [ str , Any ]","title":"on_update_pre"},{"location":"crud/SQLModelCrud/#on_filter_pre","text":"Returns the data processed by the batch query request submission filter. async def on_filter_pre ( self , request : Request , obj : SchemaFilterT , ** kwargs ) -> Dict [ str , Any ]","title":"on_filter_pre"},{"location":"extended/SQLModel/","text":"Official website documentation \u00b6 SQLModel (tiangolo.com)","title":"SQLModel"},{"location":"extended/SQLModel/#official-website-documentation","text":"SQLModel (tiangolo.com)","title":"Official website documentation"},{"location":"extended/about/","text":"About the extension tutorial \u00b6 The content of this part is not strictly within the scope of the fastapi_amis_admin development tutorial document, but reading and understanding the relevant content of this part will be more conducive to the development of fastapi_amis_admin . FastAPI Amis SQLModel SQLAlchemy Pydantic [Starlette] ( https://www.starlette.io/ ) Jinja2 Alembic Uvicorn","title":"About the extension tutorial"},{"location":"extended/about/#about-the-extension-tutorial","text":"The content of this part is not strictly within the scope of the fastapi_amis_admin development tutorial document, but reading and understanding the relevant content of this part will be more conducive to the development of fastapi_amis_admin . FastAPI Amis SQLModel SQLAlchemy Pydantic [Starlette] ( https://www.starlette.io/ ) Jinja2 Alembic Uvicorn","title":"About the extension tutorial"},{"location":"extended/alembic/","text":"alembic database migration \u00b6 create migration folder \u00b6 The first time the project runs, the migrations folder is generated alembic init -t async migrations Modify the configuration file \u00b6 env \u200b\u200bfile path: backend/migrations/env.py # import SQLModel from sqlmodel import SQLModel # import model data from app.models import * # set metadata target_metadata = SQLModel . metadata ini file path: backend/alembic.ini # Modify the asynchronous database connection of the project sqlalchemy.url = sqlite+aiosqlite:///amisadmin.db Generate migration files \u00b6 Execute the command to generate the sqlModel initialization migration file alembic revision --autogenerate update database \u00b6 - Execute command to update database: alembic_version alembic upgrade head Migration \u00b6 The following commands are executed once every time the model is modified. - Execute command to generate sqlModel update migration file alembic revision --autogenerate - Execute command to update database: alembic_version alembic upgrade head Reference documentation: \u00b6 FastAPI with Async SQLAlchemy, SQLModel, and Alembic | TestDriven.io Alembic 1.7.5 documentation","title":"alembic database migration"},{"location":"extended/alembic/#alembic-database-migration","text":"","title":"alembic database migration"},{"location":"extended/alembic/#create-migration-folder","text":"The first time the project runs, the migrations folder is generated alembic init -t async migrations","title":"create migration folder"},{"location":"extended/alembic/#modify-the-configuration-file","text":"env \u200b\u200bfile path: backend/migrations/env.py # import SQLModel from sqlmodel import SQLModel # import model data from app.models import * # set metadata target_metadata = SQLModel . metadata ini file path: backend/alembic.ini # Modify the asynchronous database connection of the project sqlalchemy.url = sqlite+aiosqlite:///amisadmin.db","title":"Modify the configuration file"},{"location":"extended/alembic/#generate-migration-files","text":"Execute the command to generate the sqlModel initialization migration file alembic revision --autogenerate","title":"Generate migration files"},{"location":"extended/alembic/#update-database","text":"- Execute command to update database: alembic_version alembic upgrade head","title":"update database"},{"location":"extended/alembic/#migration","text":"The following commands are executed once every time the model is modified. - Execute command to generate sqlModel update migration file alembic revision --autogenerate - Execute command to update database: alembic_version alembic upgrade head","title":"Migration"},{"location":"extended/alembic/#reference-documentation","text":"FastAPI with Async SQLAlchemy, SQLModel, and Alembic | TestDriven.io Alembic 1.7.5 documentation","title":"Reference documentation:"},{"location":"tutorials/quickstart/","text":"Quick start \u00b6 Install \u00b6 pip install fastapi_amis_admin Simple example \u00b6 Create the file adminsite.py : from fastapi_amis_admin.admin.settings import Settings from fastapi_amis_admin.admin.site import AdminSite from fastapi_amis_admin.admin import admin from fastapi_amis_admin.amis.components import PageSchema # Create AdminSite instance site = AdminSite ( settings = Settings ( database_url_async = 'sqlite+aiosqlite:///amisadmin.db' )) # Registration management class @site . register_admin class GitHubIframeAdmin ( admin . IframeAdmin ): # Set page menu information page_schema = PageSchema ( label = 'AmisIframeAdmin' , icon = 'fa fa-github' ) # Set the jump link src = 'https://github.com/amisadmin/fastapi_amis_admin' Create the file main.py : from fastapi import FastAPI from adminsite import site app = FastAPI () # Mount the background management system site . mount_app ( app ) if __name__ == '__main__' : import uvicorn uvicorn . run ( app , debug = True ) Run the program \u00b6 uvicorn main:app Interface preview \u00b6 Open a browser to access: http://127.0.0.1:8000/admin/ Smple program \u00b6 FastAPI-Amis-Admin-Demo : A sample FastAPI-Amis-Admin application. FastAPI-User-Auth-Demo : A sample FastAPI-User-Auth application. Related Items \u00b6 FastAPI-User-Auth : A simple and powerful FastAPI user RBAC authentication and authorization library. FastAPI-Scheduler : A simple scheduled task management project based on FastAPI + APScheduler . More features \u00b6 API reference documentation: API Reference","title":"Quick start"},{"location":"tutorials/quickstart/#quick-start","text":"","title":"Quick start"},{"location":"tutorials/quickstart/#install","text":"pip install fastapi_amis_admin","title":"Install"},{"location":"tutorials/quickstart/#simple-example","text":"Create the file adminsite.py : from fastapi_amis_admin.admin.settings import Settings from fastapi_amis_admin.admin.site import AdminSite from fastapi_amis_admin.admin import admin from fastapi_amis_admin.amis.components import PageSchema # Create AdminSite instance site = AdminSite ( settings = Settings ( database_url_async = 'sqlite+aiosqlite:///amisadmin.db' )) # Registration management class @site . register_admin class GitHubIframeAdmin ( admin . IframeAdmin ): # Set page menu information page_schema = PageSchema ( label = 'AmisIframeAdmin' , icon = 'fa fa-github' ) # Set the jump link src = 'https://github.com/amisadmin/fastapi_amis_admin' Create the file main.py : from fastapi import FastAPI from adminsite import site app = FastAPI () # Mount the background management system site . mount_app ( app ) if __name__ == '__main__' : import uvicorn uvicorn . run ( app , debug = True )","title":"Simple example"},{"location":"tutorials/quickstart/#run-the-program","text":"uvicorn main:app","title":"Run the program"},{"location":"tutorials/quickstart/#interface-preview","text":"Open a browser to access: http://127.0.0.1:8000/admin/","title":"Interface preview"},{"location":"tutorials/quickstart/#smple-program","text":"FastAPI-Amis-Admin-Demo : A sample FastAPI-Amis-Admin application. FastAPI-User-Auth-Demo : A sample FastAPI-User-Auth application.","title":"Smple program"},{"location":"tutorials/quickstart/#related-items","text":"FastAPI-User-Auth : A simple and powerful FastAPI user RBAC authentication and authorization library. FastAPI-Scheduler : A simple scheduled task management project based on FastAPI + APScheduler .","title":"Related Items"},{"location":"tutorials/quickstart/#more-features","text":"API reference documentation: API Reference","title":"More features"},{"location":"tutorials/advanced/AdminApp/","text":"Management Application \u00b6 The management application is designed for more complex scenarios, the functional modules are isolated from each other, but can be easily and freely combined. # Management site architecture \u00b6 The management application is a larger management class, and the management site is a larger management application. Management application can be composed of multiple management classes or management sub-applications, their previous relationship is similar to the following figure: graph TD AdminSite --> AdminAPP AdminSite --> AdminAPP1 AdminSite --> AdminAPP2 AdminSite --> Admin1 AdminSite --> Admin2 AdminAPP1 --> AdminAPP11 AdminAPP1 --> AdminAPP12 AdminAPP --> PageAdmin AdminAPP --> FormAdmin AdminAPP --> TemplateAdmin AdminAPP --> ModelAdmin AdminAPP --> PageSchemaAdmin AdminAPP --> RouterAdmin Features of AdminAPP \u00b6 AdminAPP is also an administrative class, which can be registered to other administrative applications or administrative sites. An administrative application can register other administrative classes to its own application object. Each managed application can be configured with a separate database connection. Configuring a standalone database engine \u00b6 from sqlalchemy.ext.asyncio import create_async_engine @site . register_admin class BlogApp ( admin . AdminApp ): page_schema = PageSchema ( label = 'blog app' , icon = 'fa fa-wordpress' ) router_prefix = '/blog' # Configure custom database engine engine = create_async_engine ( 'sqlite+aiosqlite:///amisadmin.db' , future = True ) def __init__ ( self , app : \"AdminApp\" ): super () . __init__ ( app ) # Register the admin page under this application; self . register_admin ( ArticleAdmin , CategoryAdmin ) Special Usage \u00b6 The admin application can be used as a mini version of the admin site, used to group administrative categories. @site . register_admin class DocsAdminGroup ( AdminApp ): # display mode, supports 9 modes: 'line,card,radio,vertical,chrome,simple,strong,tiled,sidebar' # Display effect reference: https://aisuda.bce.baidu.com/amis/zh-CN/components/tabs#%E5%B1%95%E7%A4%BA%E6%A8%A1%E5%BC%8F # Default is: None, use menu grouping to display. tabs_mode = amis . TabsModeEnum . vertical def __init__ ( self , app : \"AdminApp\" ): super () . __init__ ( app ) self . register_admin ( HomeAdmin , DocsAdmin , ReDocsAdmin ) More Uses \u00b6 The tutorials and examples for AdminApp are not perfect at the moment, more rich features and tutorials may be added later. If you just want to implement a specific feature and don't want to delve into it, you can skip this part first. Alternatively, you can read the sample application or the source code to learn more. FastAPI-Amis-Admin-Demo : A sample FastAPI-Amis-Admin application. FastAPI-User-Auth-Demo : A FastAPI-User-Auth application example.","title":"Management Application"},{"location":"tutorials/advanced/AdminApp/#management-application","text":"The management application is designed for more complex scenarios, the functional modules are isolated from each other, but can be easily and freely combined.","title":"Management Application"},{"location":"tutorials/advanced/AdminApp/#management-site-architecture","text":"The management application is a larger management class, and the management site is a larger management application. Management application can be composed of multiple management classes or management sub-applications, their previous relationship is similar to the following figure: graph TD AdminSite --> AdminAPP AdminSite --> AdminAPP1 AdminSite --> AdminAPP2 AdminSite --> Admin1 AdminSite --> Admin2 AdminAPP1 --> AdminAPP11 AdminAPP1 --> AdminAPP12 AdminAPP --> PageAdmin AdminAPP --> FormAdmin AdminAPP --> TemplateAdmin AdminAPP --> ModelAdmin AdminAPP --> PageSchemaAdmin AdminAPP --> RouterAdmin","title":"# Management site architecture"},{"location":"tutorials/advanced/AdminApp/#features-of-adminapp","text":"AdminAPP is also an administrative class, which can be registered to other administrative applications or administrative sites. An administrative application can register other administrative classes to its own application object. Each managed application can be configured with a separate database connection.","title":"Features of AdminAPP"},{"location":"tutorials/advanced/AdminApp/#configuring-a-standalone-database-engine","text":"from sqlalchemy.ext.asyncio import create_async_engine @site . register_admin class BlogApp ( admin . AdminApp ): page_schema = PageSchema ( label = 'blog app' , icon = 'fa fa-wordpress' ) router_prefix = '/blog' # Configure custom database engine engine = create_async_engine ( 'sqlite+aiosqlite:///amisadmin.db' , future = True ) def __init__ ( self , app : \"AdminApp\" ): super () . __init__ ( app ) # Register the admin page under this application; self . register_admin ( ArticleAdmin , CategoryAdmin )","title":"Configuring a standalone database engine"},{"location":"tutorials/advanced/AdminApp/#special-usage","text":"The admin application can be used as a mini version of the admin site, used to group administrative categories. @site . register_admin class DocsAdminGroup ( AdminApp ): # display mode, supports 9 modes: 'line,card,radio,vertical,chrome,simple,strong,tiled,sidebar' # Display effect reference: https://aisuda.bce.baidu.com/amis/zh-CN/components/tabs#%E5%B1%95%E7%A4%BA%E6%A8%A1%E5%BC%8F # Default is: None, use menu grouping to display. tabs_mode = amis . TabsModeEnum . vertical def __init__ ( self , app : \"AdminApp\" ): super () . __init__ ( app ) self . register_admin ( HomeAdmin , DocsAdmin , ReDocsAdmin )","title":"Special Usage"},{"location":"tutorials/advanced/AdminApp/#more-uses","text":"The tutorials and examples for AdminApp are not perfect at the moment, more rich features and tutorials may be added later. If you just want to implement a specific feature and don't want to delve into it, you can skip this part first. Alternatively, you can read the sample application or the source code to learn more. FastAPI-Amis-Admin-Demo : A sample FastAPI-Amis-Admin application. FastAPI-User-Auth-Demo : A FastAPI-User-Auth application example.","title":"More Uses"},{"location":"tutorials/advanced/_more/","text":"More to be added... \u00b6","title":"More to be added..."},{"location":"tutorials/advanced/_more/#more-to-be-added","text":"","title":"More to be added..."},{"location":"tutorials/advanced/cli/","text":"Command line \u00b6 Project Description \u00b6 FastAPI-Amis-Admin-Cli is an extension library for building FastAPI-Amis-Admin projects quickly. Project address: FastAPI-Amis-Admin-Cli , more tutorials and usage examples are being added, Installation \u00b6 pip install fastapi-amis-admin-cli Quick use \u00b6 ## View help faa --help # Initialize a `FastAPI-Amis-Admin` project faa new project_name --init # Initialize a `FastAPI-Amis-Admin` application faa new app_name # Run the project quickly faa run","title":"Command line"},{"location":"tutorials/advanced/cli/#command-line","text":"","title":"Command line"},{"location":"tutorials/advanced/cli/#project-description","text":"FastAPI-Amis-Admin-Cli is an extension library for building FastAPI-Amis-Admin projects quickly. Project address: FastAPI-Amis-Admin-Cli , more tutorials and usage examples are being added,","title":"Project Description"},{"location":"tutorials/advanced/cli/#installation","text":"pip install fastapi-amis-admin-cli","title":"Installation"},{"location":"tutorials/advanced/cli/#quick-use","text":"## View help faa --help # Initialize a `FastAPI-Amis-Admin` project faa new project_name --init # Initialize a `FastAPI-Amis-Admin` application faa new app_name # Run the project quickly faa run","title":"Quick use"},{"location":"tutorials/advanced/debug/","text":"Project Debugging \u00b6 IDE debugging \u00b6 All IDE debugging is turned on by default and can be turned off in the following ways. Global debugging configuration via the debug`'' property in the Settings`' object site = AdminSite ( settings = Settings ( debug = False , database_url_async = 'sqlite+aiosqlite:///amisadmin.db' )) Customize FastAPI object and turn off debug site = AdminSite ( settings = Settings ( debug = False , database_url_async = 'sqlite+aiosqlite:///amisadmin.db' ), fastapi = FastAPI ( debug = False )) 3.Customize AsyncEngine object and turn off debug site = AdminSite ( settings = Settings ( debug = False ), engine = create_async_engine ( 'sqlite+aiosqlite:///amisadmin.db' , echo = False , future = True )) ApiDocs \u00b6 fastapi can automatically generate two interactive documents, and all the interfaces of fastapi-amis-admin can be debugged online via docs documents. Main application \u00b6 /docs /redoc admin \u00b6 /admin/docs /admin/redoc Amis debugging \u00b6 amis has a built-in debugging tool that allows you to view the internal running logs of the component for easy analysis of problems. Enabling method \u00b6 This feature is not enabled by default, and can be enabled in the following two ways. configure the global variable enableAMISDebug with a value of true , for example window.enableAMISDebug = true . Add amisDebug=1 to the page URL parameter, such as https://demo.amis.work/admin/?amisDebug=1 After turning on, it will be displayed on the right side of the page. Current features \u00b6 The Debug tool currently provides two functions. 1: run logs, mainly api and data conversion logs View the component data chain, after the Debug tool is expanded, click on any component to see the component's data chain Amis visual editor \u00b6 Project URL: https://github.com/aisuda/amis-editor-demo Online demo: http://aisuda.github.io/amis-editor-demo","title":"Debug"},{"location":"tutorials/advanced/debug/#project-debugging","text":"","title":"Project Debugging"},{"location":"tutorials/advanced/debug/#ide-debugging","text":"All IDE debugging is turned on by default and can be turned off in the following ways. Global debugging configuration via the debug`'' property in the Settings`' object site = AdminSite ( settings = Settings ( debug = False , database_url_async = 'sqlite+aiosqlite:///amisadmin.db' )) Customize FastAPI object and turn off debug site = AdminSite ( settings = Settings ( debug = False , database_url_async = 'sqlite+aiosqlite:///amisadmin.db' ), fastapi = FastAPI ( debug = False )) 3.Customize AsyncEngine object and turn off debug site = AdminSite ( settings = Settings ( debug = False ), engine = create_async_engine ( 'sqlite+aiosqlite:///amisadmin.db' , echo = False , future = True ))","title":"IDE debugging"},{"location":"tutorials/advanced/debug/#apidocs","text":"fastapi can automatically generate two interactive documents, and all the interfaces of fastapi-amis-admin can be debugged online via docs documents.","title":"ApiDocs"},{"location":"tutorials/advanced/debug/#main-application","text":"/docs /redoc","title":"Main application"},{"location":"tutorials/advanced/debug/#admin","text":"/admin/docs /admin/redoc","title":"admin"},{"location":"tutorials/advanced/debug/#amis-debugging","text":"amis has a built-in debugging tool that allows you to view the internal running logs of the component for easy analysis of problems.","title":"Amis debugging"},{"location":"tutorials/advanced/debug/#enabling-method","text":"This feature is not enabled by default, and can be enabled in the following two ways. configure the global variable enableAMISDebug with a value of true , for example window.enableAMISDebug = true . Add amisDebug=1 to the page URL parameter, such as https://demo.amis.work/admin/?amisDebug=1 After turning on, it will be displayed on the right side of the page.","title":"Enabling method"},{"location":"tutorials/advanced/debug/#current-features","text":"The Debug tool currently provides two functions. 1: run logs, mainly api and data conversion logs View the component data chain, after the Debug tool is expanded, click on any component to see the component's data chain","title":"Current features"},{"location":"tutorials/advanced/debug/#amis-visual-editor","text":"Project URL: https://github.com/aisuda/amis-editor-demo Online demo: http://aisuda.github.io/amis-editor-demo","title":"Amis visual editor"},{"location":"tutorials/advanced/permission/","text":"Permission Control \u00b6 FastAPI-Amis-Admin' provides very rich permission control methods, you can use different granularity of site/application/page/route permission control for different scenarios. Execution flowchart \u00b6 graph LR request(request)-->AdminSite[has_page_permission] subgraph [AdminSite] AdminSite--False-->AdminSite.error_no_page_permission(error_no_page_permission) end subgraph [AdminApp] AdminSite--True-->AdminApp[has_page_permission] AdminApp--False-->AdminApp.error_no_page_permission(error_no_page_permission) end subgraph [ModelAdmin] AdminApp--True-->ModelAdmin[has_page_permission] ModelAdmin--False-->ModelAdmin.error_no_page_permission(error_no_page_permission) ModelAdmin--True-->ModelAdmin.list[has_list_permission] ModelAdmin.list--False-->Response3(error_no_router_permission) ModelAdmin--True-->ModelAdmin.create[has_create_permission] ModelAdmin.create--False-->Response3 ModelAdmin--True-->ModelAdmin.read[has_read_permission] ModelAdmin.read--False-->Response3 ModelAdmin--True-->ModelAdmin.update[has_update_permission] ModelAdmin.update--False-->Response3 ModelAdmin--True-->ModelAdmin.delete[has_delete_permission] ModelAdmin.delete--False-->Response3 end subgraph [PageAdmin] AdminApp--True-->PageAdmin[has_page_permission] PageAdmin--False-->PageAdmin.error_no_page_permission(error_no_page_permission) end Authentication method \u00b6 Inheritance override permission validation method \u00b6 has_page_permission \u00b6 Check if you have permission to access the current page, default return: True Subordinate objects: PageSchemaAdmin and its subclasses, for example: PageAdmin , FormAdmin , ModelAdmin , AdminApp , AdminSite . The permissions of the current administrative object depend on the permissions owned by the administrative application or administrative site to which it is bound. async def has_page_permission ( self , request : Request ) -> bool : return self . app is self or await self . app . has_page_permission ( request ) If has_page_permission validates to False The backend menu will not display the current admin page and all default routes under the current admin object will be disabled. If the current object is AdminApp , all the administrative objects registered under the administrative application has_page_permission will return False by default. If the current object is ModelAdmin , then has_list_permission , has_read_permission , has_create_permission , has_update_permission , has_delete_ permission all return False by default. has_list_permission \u00b6 Check if you have bulk query permission. The default is: True . async def has_list_permission ( self , request : Request , paginator : Optional [ Paginator ], filter : Optional [ SchemaFilterT ], ** kwargs ) -> bool has_read_permission \u00b6 Checks if a single query permission is available. Default return: `True '' async def has_read_permission ( self , request : Request , item_id : Optional [ List [ str ]], ** kwargs ) -> bool has_create_permission \u00b6 Checks if the data creation permission is available. Default return: `True '' async def has_create_permission ( self , request : Request , obj : Optional [ SchemaCreateT ], ** kwargs ) -> bool has_update_permission \u00b6 Checks if the user has permission to update data. Default return: `True '' async def has_update_permission ( self , request : Request , item_id : Optional [ List [ str ]], obj : Optional [ SchemaUpdateT ], ** kwargs ) -> bool has_delete_permission \u00b6 Checks if the data deletion permission is available. Default return: `True '' async def has_delete_permission ( self , request : Request , item_id : Optional [ List [ str ]], ** kwargs ) -> bool : return True If has_crud_permission validates to False the CRUD form page will no longer display the corresponding action buttons and the corresponding API routes will be disabled. Custom permission validation dependencies \u00b6 router_permission_depend \u00b6 The route registrar permission validation dependency. Default: None . page_permission_depend \u00b6 Current page routing permission validation dependency. Default: has_page_permission Registering global permission validation dependencies \u00b6 By registering a global permission validation dependency, all routes under the AdminSite object will be required to pass the specified permission validation. from fastapi import Depends , FastAPI , Header , HTTPException async def verify_token ( x_token : str = Header ( ... )): if x_token != \"fake-super-secret-token\" : raise HTTPException ( status_code = 400 , detail = \"X-Token header invalid\" ) site = AdminSite ( settings = Settings ( debug = True , database_url_async = 'sqlite+aiosqlite:///amisadmin.db' ), fastapi = FastAPI ( dependencies = [ Depends ( verify_token )]) )","title":"Permission Control"},{"location":"tutorials/advanced/permission/#permission-control","text":"FastAPI-Amis-Admin' provides very rich permission control methods, you can use different granularity of site/application/page/route permission control for different scenarios.","title":"Permission Control"},{"location":"tutorials/advanced/permission/#execution-flowchart","text":"graph LR request(request)-->AdminSite[has_page_permission] subgraph [AdminSite] AdminSite--False-->AdminSite.error_no_page_permission(error_no_page_permission) end subgraph [AdminApp] AdminSite--True-->AdminApp[has_page_permission] AdminApp--False-->AdminApp.error_no_page_permission(error_no_page_permission) end subgraph [ModelAdmin] AdminApp--True-->ModelAdmin[has_page_permission] ModelAdmin--False-->ModelAdmin.error_no_page_permission(error_no_page_permission) ModelAdmin--True-->ModelAdmin.list[has_list_permission] ModelAdmin.list--False-->Response3(error_no_router_permission) ModelAdmin--True-->ModelAdmin.create[has_create_permission] ModelAdmin.create--False-->Response3 ModelAdmin--True-->ModelAdmin.read[has_read_permission] ModelAdmin.read--False-->Response3 ModelAdmin--True-->ModelAdmin.update[has_update_permission] ModelAdmin.update--False-->Response3 ModelAdmin--True-->ModelAdmin.delete[has_delete_permission] ModelAdmin.delete--False-->Response3 end subgraph [PageAdmin] AdminApp--True-->PageAdmin[has_page_permission] PageAdmin--False-->PageAdmin.error_no_page_permission(error_no_page_permission) end","title":"Execution flowchart"},{"location":"tutorials/advanced/permission/#authentication-method","text":"","title":"Authentication method"},{"location":"tutorials/advanced/permission/#inheritance-override-permission-validation-method","text":"","title":"Inheritance override permission validation method"},{"location":"tutorials/advanced/permission/#has_page_permission","text":"Check if you have permission to access the current page, default return: True Subordinate objects: PageSchemaAdmin and its subclasses, for example: PageAdmin , FormAdmin , ModelAdmin , AdminApp , AdminSite . The permissions of the current administrative object depend on the permissions owned by the administrative application or administrative site to which it is bound. async def has_page_permission ( self , request : Request ) -> bool : return self . app is self or await self . app . has_page_permission ( request ) If has_page_permission validates to False The backend menu will not display the current admin page and all default routes under the current admin object will be disabled. If the current object is AdminApp , all the administrative objects registered under the administrative application has_page_permission will return False by default. If the current object is ModelAdmin , then has_list_permission , has_read_permission , has_create_permission , has_update_permission , has_delete_ permission all return False by default.","title":"has_page_permission"},{"location":"tutorials/advanced/permission/#has_list_permission","text":"Check if you have bulk query permission. The default is: True . async def has_list_permission ( self , request : Request , paginator : Optional [ Paginator ], filter : Optional [ SchemaFilterT ], ** kwargs ) -> bool","title":"has_list_permission"},{"location":"tutorials/advanced/permission/#has_read_permission","text":"Checks if a single query permission is available. Default return: `True '' async def has_read_permission ( self , request : Request , item_id : Optional [ List [ str ]], ** kwargs ) -> bool","title":"has_read_permission"},{"location":"tutorials/advanced/permission/#has_create_permission","text":"Checks if the data creation permission is available. Default return: `True '' async def has_create_permission ( self , request : Request , obj : Optional [ SchemaCreateT ], ** kwargs ) -> bool","title":"has_create_permission"},{"location":"tutorials/advanced/permission/#has_update_permission","text":"Checks if the user has permission to update data. Default return: `True '' async def has_update_permission ( self , request : Request , item_id : Optional [ List [ str ]], obj : Optional [ SchemaUpdateT ], ** kwargs ) -> bool","title":"has_update_permission"},{"location":"tutorials/advanced/permission/#has_delete_permission","text":"Checks if the data deletion permission is available. Default return: `True '' async def has_delete_permission ( self , request : Request , item_id : Optional [ List [ str ]], ** kwargs ) -> bool : return True If has_crud_permission validates to False the CRUD form page will no longer display the corresponding action buttons and the corresponding API routes will be disabled.","title":"has_delete_permission"},{"location":"tutorials/advanced/permission/#custom-permission-validation-dependencies","text":"","title":"Custom permission validation dependencies"},{"location":"tutorials/advanced/permission/#router_permission_depend","text":"The route registrar permission validation dependency. Default: None .","title":"router_permission_depend"},{"location":"tutorials/advanced/permission/#page_permission_depend","text":"Current page routing permission validation dependency. Default: has_page_permission","title":"page_permission_depend"},{"location":"tutorials/advanced/permission/#registering-global-permission-validation-dependencies","text":"By registering a global permission validation dependency, all routes under the AdminSite object will be required to pass the specified permission validation. from fastapi import Depends , FastAPI , Header , HTTPException async def verify_token ( x_token : str = Header ( ... )): if x_token != \"fake-super-secret-token\" : raise HTTPException ( status_code = 400 , detail = \"X-Token header invalid\" ) site = AdminSite ( settings = Settings ( debug = True , database_url_async = 'sqlite+aiosqlite:///amisadmin.db' ), fastapi = FastAPI ( dependencies = [ Depends ( verify_token )]) )","title":"Registering global permission validation dependencies"},{"location":"tutorials/advanced/scheduler/","text":"Scheduled tasks \u00b6 FastAPI-Amis-Admin is based on APScheduler to provide a simple and powerful timed task system for the system in the form of application plug-ins. Project Introduction \u00b6 FastAPI-Scheduler is a simple scheduled task management FastAPI extension library based on APScheduler . Project address: FastAPI-Scheduler Install \u00b6 pip install fastapi-scheduler Simple example \u00b6 from fastapi import FastAPI from fastapi_amis_admin.admin.settings import Settings from fastapi_amis_admin.admin.site import AdminSite from datetime import date from fastapi_scheduler import SchedulerAdmin # Create `FastAPI` application app = FastAPI () # Create `AdminSite` instance site = AdminSite ( settings = Settings ( database_url_async = 'sqlite+aiosqlite:///amisadmin.db' )) # Create an instance of the scheduled task scheduler `SchedulerAdmin` scheduler = SchedulerAdmin . bind ( site ) # Add scheduled tasks, refer to the official documentation: https://apscheduler.readthedocs.io/en/master/ # use when you want to run the job at fixed intervals of time @scheduler . scheduled_job ( 'interval' , seconds = 60 ) def interval_task_test (): print ( 'interval task is run...' ) # use when you want to run the job periodically at certain time(s) of day @scheduler . scheduled_job ( 'cron' , hour = 3 , minute = 30 ) def cron_task_test (): print ( 'cron task is run...' ) # use when you want to run the job just once at a certain point of time @scheduler . scheduled_job ( 'date' , run_date = date ( 2022 , 11 , 11 )) def date_task_test (): print ( 'date task is run...' ) # Mount the background management system site . mount_app ( app ) @app . on_event ( \"startup\" ) async def startup (): # Start the scheduled task scheduler scheduler . start () if __name__ == '__main__' : import uvicorn uvicorn . run ( app , debug = True ) Interface preview \u00b6 Open http://127.0.0.1:8000/admin/ in your browser: Dependent projects \u00b6 FastAPI-Amis-Admin APScheduler","title":"Scheduled tasks"},{"location":"tutorials/advanced/scheduler/#scheduled-tasks","text":"FastAPI-Amis-Admin is based on APScheduler to provide a simple and powerful timed task system for the system in the form of application plug-ins.","title":"Scheduled tasks"},{"location":"tutorials/advanced/scheduler/#project-introduction","text":"FastAPI-Scheduler is a simple scheduled task management FastAPI extension library based on APScheduler . Project address: FastAPI-Scheduler","title":"Project Introduction"},{"location":"tutorials/advanced/scheduler/#install","text":"pip install fastapi-scheduler","title":"Install"},{"location":"tutorials/advanced/scheduler/#simple-example","text":"from fastapi import FastAPI from fastapi_amis_admin.admin.settings import Settings from fastapi_amis_admin.admin.site import AdminSite from datetime import date from fastapi_scheduler import SchedulerAdmin # Create `FastAPI` application app = FastAPI () # Create `AdminSite` instance site = AdminSite ( settings = Settings ( database_url_async = 'sqlite+aiosqlite:///amisadmin.db' )) # Create an instance of the scheduled task scheduler `SchedulerAdmin` scheduler = SchedulerAdmin . bind ( site ) # Add scheduled tasks, refer to the official documentation: https://apscheduler.readthedocs.io/en/master/ # use when you want to run the job at fixed intervals of time @scheduler . scheduled_job ( 'interval' , seconds = 60 ) def interval_task_test (): print ( 'interval task is run...' ) # use when you want to run the job periodically at certain time(s) of day @scheduler . scheduled_job ( 'cron' , hour = 3 , minute = 30 ) def cron_task_test (): print ( 'cron task is run...' ) # use when you want to run the job just once at a certain point of time @scheduler . scheduled_job ( 'date' , run_date = date ( 2022 , 11 , 11 )) def date_task_test (): print ( 'date task is run...' ) # Mount the background management system site . mount_app ( app ) @app . on_event ( \"startup\" ) async def startup (): # Start the scheduled task scheduler scheduler . start () if __name__ == '__main__' : import uvicorn uvicorn . run ( app , debug = True )","title":"Simple example"},{"location":"tutorials/advanced/scheduler/#interface-preview","text":"Open http://127.0.0.1:8000/admin/ in your browser:","title":"Interface preview"},{"location":"tutorials/advanced/scheduler/#dependent-projects","text":"FastAPI-Amis-Admin APScheduler","title":"Dependent projects"},{"location":"tutorials/advanced/structure/","text":"Directory Structure \u00b6 In actual project development, the number of data models and management pages involved is generally large. fastapi-amis-admin recommends that the project adopts a directory structure similar to the django project. Please refer to fastapi_amis_admin_demo , but this is not a mandatory limit, you can also use your own familiar directory structure. Execute the initialization command \u00b6 The initialization project file can be quickly generated by executing the following command # Initialize a `FastAPI-Amis-Admin` project faa new project_name --init # Initialize a `FastAPI-Amis-Admin` application faa new app_name Example project structure \u00b6 \u2502. \u2502 .gitignore \u2502 docker-compose.yml \u2502 Dockerfile \u2502 README.md \u2502 \u251c\u2500backend \u2502 \u2502 .env \u2502 \u2502 alembic.ini \u2502 \u2502 amisadmin.db \u2502 \u2502 main.py \u2502 \u2502 requirements.txt \u2502 \u2502 \u2502 \u251c\u2500apps \u2502 \u2502 \u2502 __init__.py \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500blog \u2502 \u2502 \u2502 \u2502 admin.py \u2502 \u2502 \u2502 \u2502 apis.py \u2502 \u2502 \u2502 \u2502 views.py \u2502 \u2502 \u2502 \u2502 models.py \u2502 \u2502 \u2502 \u2502 schemas.py \u2502 \u2502 \u2502 \u2502 jobs.py \u2502 \u2502 \u2502 \u2502 settings.py \u2502 \u2502 \u2502 \u2502 __init__.py \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500templates \u2502 \u2502 \u2502 \u251c\u2500static \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500demo \u2502 \u2502 \u2502 admin.py \u2502 \u2502 \u2502 __init__.py \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500templates \u2502 \u2502 \u2502 element.html \u2502 \u2502 \u2502 simple.html \u2502 \u2502 \u2502 \u251c\u2500core \u2502 \u2502 \u2502 adminsite.py \u2502 \u2502 \u2502 settings.py \u2502 \u2502 \u2502 __init__.py \u2502 \u2502 \u2502 \u251c\u2500migrations \u2502 \u2502 \u2502 env.py \u2502 \u2502 \u2502 README \u2502 \u2502 \u2502 script.py.mako \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500versions \u2502 \u2502 \u2502 bcd68ae939ea_add_url.py \u2502 \u2502 \u2502 c79e1785119e_init.py \u2502 \u2502 \u2502 \u251c\u2500upload \u2502 \u2502 \u2502 \u251c\u2500utils \u2502 \u251c\u2500scripts run.sh","title":"Directory Structure"},{"location":"tutorials/advanced/structure/#directory-structure","text":"In actual project development, the number of data models and management pages involved is generally large. fastapi-amis-admin recommends that the project adopts a directory structure similar to the django project. Please refer to fastapi_amis_admin_demo , but this is not a mandatory limit, you can also use your own familiar directory structure.","title":"Directory Structure"},{"location":"tutorials/advanced/structure/#execute-the-initialization-command","text":"The initialization project file can be quickly generated by executing the following command # Initialize a `FastAPI-Amis-Admin` project faa new project_name --init # Initialize a `FastAPI-Amis-Admin` application faa new app_name","title":"Execute the initialization command"},{"location":"tutorials/advanced/structure/#example-project-structure","text":"\u2502. \u2502 .gitignore \u2502 docker-compose.yml \u2502 Dockerfile \u2502 README.md \u2502 \u251c\u2500backend \u2502 \u2502 .env \u2502 \u2502 alembic.ini \u2502 \u2502 amisadmin.db \u2502 \u2502 main.py \u2502 \u2502 requirements.txt \u2502 \u2502 \u2502 \u251c\u2500apps \u2502 \u2502 \u2502 __init__.py \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500blog \u2502 \u2502 \u2502 \u2502 admin.py \u2502 \u2502 \u2502 \u2502 apis.py \u2502 \u2502 \u2502 \u2502 views.py \u2502 \u2502 \u2502 \u2502 models.py \u2502 \u2502 \u2502 \u2502 schemas.py \u2502 \u2502 \u2502 \u2502 jobs.py \u2502 \u2502 \u2502 \u2502 settings.py \u2502 \u2502 \u2502 \u2502 __init__.py \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500templates \u2502 \u2502 \u2502 \u251c\u2500static \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500demo \u2502 \u2502 \u2502 admin.py \u2502 \u2502 \u2502 __init__.py \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500templates \u2502 \u2502 \u2502 element.html \u2502 \u2502 \u2502 simple.html \u2502 \u2502 \u2502 \u251c\u2500core \u2502 \u2502 \u2502 adminsite.py \u2502 \u2502 \u2502 settings.py \u2502 \u2502 \u2502 __init__.py \u2502 \u2502 \u2502 \u251c\u2500migrations \u2502 \u2502 \u2502 env.py \u2502 \u2502 \u2502 README \u2502 \u2502 \u2502 script.py.mako \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500versions \u2502 \u2502 \u2502 bcd68ae939ea_add_url.py \u2502 \u2502 \u2502 c79e1785119e_init.py \u2502 \u2502 \u2502 \u251c\u2500upload \u2502 \u2502 \u2502 \u251c\u2500utils \u2502 \u251c\u2500scripts run.sh","title":"Example project structure"},{"location":"tutorials/advanced/user-auth/","text":"User Authentication \u00b6 FastAPI-Amis-Admin provides simple and powerful user RBAC authentication and authorization for the system in the form of application plug-ins. Project address: FastAPI-User-Auth , more tutorial documents and usage examples are being added continuously, Welcome to join the Q group 229036692 to study and discuss together. Install \u00b6 pip install fastapi-user-auth Simple example \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 from fastapi import FastAPI from fastapi_amis_admin.admin import Settings from fastapi_user_auth.site import AuthAdminSite # Create FastAPI application app = FastAPI () # Create AdminSite instance site = AuthAdminSite ( settings = Settings ( database_url_async = 'sqlite+aiosqlite:///amisadmin.db' ) ) auth = site . auth # Mount the background management system site . mount_app ( app ) # Create initialized database table @app . on_event ( \"startup\" ) async def startup (): await site . db . async_run_sync ( SQLModel . metadata . create_all , is_session = False ) # Create a default test user, please change the password in time!!! await auth . create_role_user ( 'admin' ) await auth . create_role_user ( 'vip' ) if __name__ == '__main__' : import uvicorn uvicorn . run ( app , debug = True ) About AuthAdminSite AuthAdminSite is a default authorization management site class encapsulated by FastAPI-User-Auth, which requires users to be logged in. Admin objects registered through AuthAdminSite have the same default permissions (ie: users must also be logged in). You can upgrade or downgrade the default permission requirements by overriding the has_page_permission method. Example-1 \u00b6 Requirements: There is an existing user management application. On the basis of requiring user login, it is also required that the currently logged in user is an administrator, and other non-administrator users are prohibited from operating. class UserAuthApp ( AdminApp ): async def has_page_permission ( self , request : Request ) -> bool : return await request . auth . requires ( roles = 'admin' , response = False )( request ) Example-2 \u00b6 Requirements: Under the user management application in the above example, the user login/registration form management object is included, and this part of the route does not require the user to be logged in. class UserLoginFormAdmin ( FormAdmin ): async def has_page_permission ( self , request : Request ) -> bool : return True Example-3 \u00b6 Requirements: There is a ModelAdmin article model management, the permission requirements are as follows: All articles are made public and can be viewed without user login. The user is not logged in, cannot filter articles by title, and can only view up to 10 pieces of data per page. The user is logged in and the registration time is more than 3 days before publishing articles. The user is logged in and can only modify his own articles, and cannot be modified in batches. Administrators can modify all articles, and can modify them in batches. You must be an administrator to delete articles. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 class ArticleAdmin ( admin . ModelAdmin ): group_schema = None page_schema = PageSchema ( label = 'article management' , icon = 'fa fa-file' ) model = Article # Configure list display fields list_display = [ Article . id , Article . title , Article . img , Article . status , Category . name , User . username , TableColumn ( type = 'tpl' , label = 'custom template column' , tpl = '<a href=\"$ {source} \" target=\"_blank\">ID:$ {id} ,Title:$ {title} </a>' ), Article . create_time , Article . description , ] # Configure fuzzy search fields search_fields = [ Article . title , Category . name , User . username ] # Configure the associated model link_model_fields = [ Article . tags ] # custom query selector async def get_select ( self , request : Request ) -> Select : sel = await super () . get_select ( request ) return sel . join ( Category , isouter = True ) . join ( User , isouter = True ) # ASD async def has_page_permission ( self , request : Request ) -> bool : return True async def has_list_permission ( self , request : Request , paginator : Paginator , filter : BaseModel = None , ** kwargs ) -> bool : # The user is not logged in, cannot filter articles by title, and can only view up to 10 pieces of data per page. return bool ( await self . site . auth . requires ( response = False )( request ) or ( paginator . perPage <= 10 and filter . title == '' ) ) async def has_create_permission ( self , request : Request , data : BaseModel , ** kwargs ) -> bool : # The user is logged in and the registration time is greater than 3 days before they can publish articles; or the admin role return bool ( await self . site . auth . requires ( response = False )( request ) and request . user . create_time < datetime . now () - timedelta ( days = 3 ) ) or await self . site . auth . requires ( roles = 'admin' , response = False )( request ) async def has_delete_permission ( self , request : Request , item_id : List [ str ], ** kwargs ) -> bool : # You must be an administrator to delete articles. return await self . site . auth . requires ( roles = 'admin' , response = False )( request ) async def has_update_permission ( self , request : Request , item_id : List [ str ], data : BaseModel , ** kwargs ) -> bool : if await self . site . auth . requires ( response = False )( request ): if item_id is None : return True async with self . site . db . session_maker () as session : # Administrators can modify all articles, and can modify them in batches. if await request . user . has_role ([ 'admin' ], session ): return True # Non-administrators can only modify their own articles, and cannot modify them in batches. result = await session . execute ( select ( Article . id ) . where ( Article . id == item_id [ 0 ], Article . user_id == request . user . id ) . limit ( 1 ) ) if result . first (): return True return False async def on_create_pre ( self , request : Request , obj : BaseModel , ** kwargs ) -> Dict [ str , Any ]: data = await super () . on_create_pre ( request , obj , ** kwargs ) # When creating a new article, set the current user as the publisher data [ 'user_id' ] = request . user . id return data Interface preview \u00b6 Open http://127.0.0.1:8000/admin/auth/form/login in your browser: Open http://127.0.0.1:8000/admin/ in your browser: Open http://127.0.0.1:8000/admin/docs in your browser:","title":"User Authentication"},{"location":"tutorials/advanced/user-auth/#user-authentication","text":"FastAPI-Amis-Admin provides simple and powerful user RBAC authentication and authorization for the system in the form of application plug-ins. Project address: FastAPI-User-Auth , more tutorial documents and usage examples are being added continuously, Welcome to join the Q group 229036692 to study and discuss together.","title":"User Authentication"},{"location":"tutorials/advanced/user-auth/#install","text":"pip install fastapi-user-auth","title":"Install"},{"location":"tutorials/advanced/user-auth/#simple-example","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 from fastapi import FastAPI from fastapi_amis_admin.admin import Settings from fastapi_user_auth.site import AuthAdminSite # Create FastAPI application app = FastAPI () # Create AdminSite instance site = AuthAdminSite ( settings = Settings ( database_url_async = 'sqlite+aiosqlite:///amisadmin.db' ) ) auth = site . auth # Mount the background management system site . mount_app ( app ) # Create initialized database table @app . on_event ( \"startup\" ) async def startup (): await site . db . async_run_sync ( SQLModel . metadata . create_all , is_session = False ) # Create a default test user, please change the password in time!!! await auth . create_role_user ( 'admin' ) await auth . create_role_user ( 'vip' ) if __name__ == '__main__' : import uvicorn uvicorn . run ( app , debug = True ) About AuthAdminSite AuthAdminSite is a default authorization management site class encapsulated by FastAPI-User-Auth, which requires users to be logged in. Admin objects registered through AuthAdminSite have the same default permissions (ie: users must also be logged in). You can upgrade or downgrade the default permission requirements by overriding the has_page_permission method.","title":"Simple example"},{"location":"tutorials/advanced/user-auth/#example-1","text":"Requirements: There is an existing user management application. On the basis of requiring user login, it is also required that the currently logged in user is an administrator, and other non-administrator users are prohibited from operating. class UserAuthApp ( AdminApp ): async def has_page_permission ( self , request : Request ) -> bool : return await request . auth . requires ( roles = 'admin' , response = False )( request )","title":"Example-1"},{"location":"tutorials/advanced/user-auth/#example-2","text":"Requirements: Under the user management application in the above example, the user login/registration form management object is included, and this part of the route does not require the user to be logged in. class UserLoginFormAdmin ( FormAdmin ): async def has_page_permission ( self , request : Request ) -> bool : return True","title":"Example-2"},{"location":"tutorials/advanced/user-auth/#example-3","text":"Requirements: There is a ModelAdmin article model management, the permission requirements are as follows: All articles are made public and can be viewed without user login. The user is not logged in, cannot filter articles by title, and can only view up to 10 pieces of data per page. The user is logged in and the registration time is more than 3 days before publishing articles. The user is logged in and can only modify his own articles, and cannot be modified in batches. Administrators can modify all articles, and can modify them in batches. You must be an administrator to delete articles. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 class ArticleAdmin ( admin . ModelAdmin ): group_schema = None page_schema = PageSchema ( label = 'article management' , icon = 'fa fa-file' ) model = Article # Configure list display fields list_display = [ Article . id , Article . title , Article . img , Article . status , Category . name , User . username , TableColumn ( type = 'tpl' , label = 'custom template column' , tpl = '<a href=\"$ {source} \" target=\"_blank\">ID:$ {id} ,Title:$ {title} </a>' ), Article . create_time , Article . description , ] # Configure fuzzy search fields search_fields = [ Article . title , Category . name , User . username ] # Configure the associated model link_model_fields = [ Article . tags ] # custom query selector async def get_select ( self , request : Request ) -> Select : sel = await super () . get_select ( request ) return sel . join ( Category , isouter = True ) . join ( User , isouter = True ) # ASD async def has_page_permission ( self , request : Request ) -> bool : return True async def has_list_permission ( self , request : Request , paginator : Paginator , filter : BaseModel = None , ** kwargs ) -> bool : # The user is not logged in, cannot filter articles by title, and can only view up to 10 pieces of data per page. return bool ( await self . site . auth . requires ( response = False )( request ) or ( paginator . perPage <= 10 and filter . title == '' ) ) async def has_create_permission ( self , request : Request , data : BaseModel , ** kwargs ) -> bool : # The user is logged in and the registration time is greater than 3 days before they can publish articles; or the admin role return bool ( await self . site . auth . requires ( response = False )( request ) and request . user . create_time < datetime . now () - timedelta ( days = 3 ) ) or await self . site . auth . requires ( roles = 'admin' , response = False )( request ) async def has_delete_permission ( self , request : Request , item_id : List [ str ], ** kwargs ) -> bool : # You must be an administrator to delete articles. return await self . site . auth . requires ( roles = 'admin' , response = False )( request ) async def has_update_permission ( self , request : Request , item_id : List [ str ], data : BaseModel , ** kwargs ) -> bool : if await self . site . auth . requires ( response = False )( request ): if item_id is None : return True async with self . site . db . session_maker () as session : # Administrators can modify all articles, and can modify them in batches. if await request . user . has_role ([ 'admin' ], session ): return True # Non-administrators can only modify their own articles, and cannot modify them in batches. result = await session . execute ( select ( Article . id ) . where ( Article . id == item_id [ 0 ], Article . user_id == request . user . id ) . limit ( 1 ) ) if result . first (): return True return False async def on_create_pre ( self , request : Request , obj : BaseModel , ** kwargs ) -> Dict [ str , Any ]: data = await super () . on_create_pre ( request , obj , ** kwargs ) # When creating a new article, set the current user as the publisher data [ 'user_id' ] = request . user . id return data","title":"Example-3"},{"location":"tutorials/advanced/user-auth/#interface-preview","text":"Open http://127.0.0.1:8000/admin/auth/form/login in your browser: Open http://127.0.0.1:8000/admin/ in your browser: Open http://127.0.0.1:8000/admin/docs in your browser:","title":"Interface preview"},{"location":"tutorials/basic/FormAdmin/","text":"Form Management \u00b6 FormAdmin implements to display a menu in the menu list. Clicking on the menu will display an amis form page. Example \u00b6 from fastapi_amis_admin.admin import admin from fastapi_amis_admin.crud import BaseApiOut from fastapi_amis_admin.models.fields import Field from pydantic import BaseModel from starlette.requests import Request @site . register_admin class UserLoginFormAdmin ( admin . FormAdmin ): page_schema = 'UserLoginForm' # Configure form information, can be omitted form = Form ( title = 'This is a test login form' , submitText = 'Login' ) # Create a form data model class schema ( BaseModel ): username : str = Field ( ... , title = 'username' , min_length = 3 , max_length = 30 ) password : str = Field ( ... , title = 'password' ) # Handle form submission data async def handle ( self , request : Request , data : BaseModel , ** kwargs ) -> BaseApiOut [ Any ]: if data . username == 'amisadmin' and data . password == 'amisadmin' : return BaseApiOut ( msg = 'Login successful!' , data = { 'token' : 'xxxxxxx' }) return BaseApiOut ( status =- 1 , msg = 'Username or password error!' ) What is shown here is just a simple and basic function. Form object \u00b6 The class field form can be used to configure basic information about the form, such as: title, form style, submit button, submit API, message prompt, etc. Please refer to: Form form Form Data Model \u00b6 The class field schema defines the form data model, which is inherited from pydantic BaseModel , and supports various types of fields, which are automatically parsed into corresponding components on the front-end by amis . The functions that can be accomplished through schema are: Define basic field properties. For example: name, label, data type, basic restrictions Custom field handling or validators. Reference: Validators - pydantic Customize the amis component. You can customize the amis component with amis_form_item . Handle functions \u00b6 The class method handle receives the form data submitted by the user, where you can perform all kinds of complex logical processing of the form data. More Uses \u00b6 In fact FormAdmin has more complex uses than can be explained in detail here, please refer to the following documents. Related documentation \u00b6 FormAdmin","title":"Form Management"},{"location":"tutorials/basic/FormAdmin/#form-management","text":"FormAdmin implements to display a menu in the menu list. Clicking on the menu will display an amis form page.","title":"Form Management"},{"location":"tutorials/basic/FormAdmin/#example","text":"from fastapi_amis_admin.admin import admin from fastapi_amis_admin.crud import BaseApiOut from fastapi_amis_admin.models.fields import Field from pydantic import BaseModel from starlette.requests import Request @site . register_admin class UserLoginFormAdmin ( admin . FormAdmin ): page_schema = 'UserLoginForm' # Configure form information, can be omitted form = Form ( title = 'This is a test login form' , submitText = 'Login' ) # Create a form data model class schema ( BaseModel ): username : str = Field ( ... , title = 'username' , min_length = 3 , max_length = 30 ) password : str = Field ( ... , title = 'password' ) # Handle form submission data async def handle ( self , request : Request , data : BaseModel , ** kwargs ) -> BaseApiOut [ Any ]: if data . username == 'amisadmin' and data . password == 'amisadmin' : return BaseApiOut ( msg = 'Login successful!' , data = { 'token' : 'xxxxxxx' }) return BaseApiOut ( status =- 1 , msg = 'Username or password error!' ) What is shown here is just a simple and basic function.","title":"Example"},{"location":"tutorials/basic/FormAdmin/#form-object","text":"The class field form can be used to configure basic information about the form, such as: title, form style, submit button, submit API, message prompt, etc. Please refer to: Form form","title":"Form object"},{"location":"tutorials/basic/FormAdmin/#form-data-model","text":"The class field schema defines the form data model, which is inherited from pydantic BaseModel , and supports various types of fields, which are automatically parsed into corresponding components on the front-end by amis . The functions that can be accomplished through schema are: Define basic field properties. For example: name, label, data type, basic restrictions Custom field handling or validators. Reference: Validators - pydantic Customize the amis component. You can customize the amis component with amis_form_item .","title":"Form Data Model"},{"location":"tutorials/basic/FormAdmin/#handle-functions","text":"The class method handle receives the form data submitted by the user, where you can perform all kinds of complex logical processing of the form data.","title":"Handle functions"},{"location":"tutorials/basic/FormAdmin/#more-uses","text":"In fact FormAdmin has more complex uses than can be explained in detail here, please refer to the following documents.","title":"More Uses"},{"location":"tutorials/basic/FormAdmin/#related-documentation","text":"FormAdmin","title":"Related documentation"},{"location":"tutorials/basic/Inheritance/","text":"Inheritance override \u00b6 The inheritance and rewriting of classes in fastapi-amis-admin is very extensive. Skilled application of inheritance and rewriting will make your code more concise and easier to extend. The usual admin pages inherit from the default admin classes, such as: IframeAdmin , PageAdmin , ModelAdmin , FormAdmin , AdminApp , etc. The management page inherited from the default management class can also be inherited twice or multiple times. Example-1 (custom home page) \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 from fastapi_amis_admin import admin # Cancel the default home page site . unregister_admin ( admin . HomeAdmin ) # Register custom homepage @site . register_admin class MyHomeAdmin ( admin . HomeAdmin ): async def get_page ( self , request : Request ) -> Page : # Get the default page page = await super () . get_page ( request ) # custom modification page . body . title = 'MyHome' ... return page Example-2 (custom template management base class) \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 import datetime from fastapi_amis_admin import admin , amis class MyJinja2Admin ( admin . TemplateAdmin ): templates : Jinja2Templates = Jinja2Templates ( directory = 'apps/demo/templates' ) @site . register_admin class SimpleTemplateAdmin ( MyJinja2Admin ): page_schema = amis . PageSchema ( label = 'Jinja2' , icon = 'fa fa-link' ) template_name = 'simple.html' async def get_page ( self , request : Request ) -> Dict [ str , Any ]: return { 'current_time' : datetime . datetime . now ()} @site . register_admin class ElementTemplateAdmin ( MyJinja2Admin ): page_schema = amis . PageSchema ( label = 'ElementUI' , icon = 'fa fa-link' ) template_name = 'element.html' Example-3 (reuse model management class) \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 from fastapi_amis_admin import admin from fastapi_amis_admin.models.fields import Field # Create a SQLModel model, please refer to: https://sqlmodel.tiangolo.com/ class Article ( SQLModel , table = True ): id : int = Field ( default = None , primary_key = True , nullable = False ) title : str = Field ( title = 'ArticleTitle' , max_length = 200 ) description : Optional [ str ] = Field ( default = '' , title = 'ArticleDescription' , max_length = 400 ) status : bool = Field ( None , title = 'status' ) content : str = Field ( title = 'ArticleContent' ) category_id : Optional [ int ] = Field ( default = None , foreign_key = \"category.id\" , title = 'CategoryId' ) is_active : bool = False @site . register_admin class ArticleAdmin ( admin . ModelAdmin ): page_schema = 'article management' model = Article # Set the fields to display list_display = [ Article . id , Article . title , Article . description , Article . status , Category . name ] # Set up fuzzy search field search_fields = [ Article . title , Category . name ] # custom base selector async def get_select ( self , request : Request ) -> Select : stmt = await super () . get_select ( request ) return stmt . outerjoin ( Category , Article . category_id == Category . id ) @site . register_admin class ActiveArticle ( ArticleAdmin ): \"\"\"Inheritance and reuse of `ArticleAdmin`; this example is relatively simple, the actual application may be more complex.\"\"\" # custom route prefix router_prefix = '/article.active' # Override the base selector async def get_select ( self , request : Request ) -> Select : stmt = await super () . get_select ( request ) return stmt . where ( Article . is_active == True ) Example-4 (custom management application) \u00b6 \u53c2\u8003: fastapi_user_auth.UserAuthApp Example-5 (custom admin site) \u00b6 Reference: Basic Tutorial->Site Configuration->Custom Management Site \u53c2\u8003: fastapi_user_auth.AuthAdminSite","title":"Inheritance override"},{"location":"tutorials/basic/Inheritance/#inheritance-override","text":"The inheritance and rewriting of classes in fastapi-amis-admin is very extensive. Skilled application of inheritance and rewriting will make your code more concise and easier to extend. The usual admin pages inherit from the default admin classes, such as: IframeAdmin , PageAdmin , ModelAdmin , FormAdmin , AdminApp , etc. The management page inherited from the default management class can also be inherited twice or multiple times.","title":"Inheritance override"},{"location":"tutorials/basic/Inheritance/#example-1-custom-home-page","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 from fastapi_amis_admin import admin # Cancel the default home page site . unregister_admin ( admin . HomeAdmin ) # Register custom homepage @site . register_admin class MyHomeAdmin ( admin . HomeAdmin ): async def get_page ( self , request : Request ) -> Page : # Get the default page page = await super () . get_page ( request ) # custom modification page . body . title = 'MyHome' ... return page","title":"Example-1 (custom home page)"},{"location":"tutorials/basic/Inheritance/#example-2-custom-template-management-base-class","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 import datetime from fastapi_amis_admin import admin , amis class MyJinja2Admin ( admin . TemplateAdmin ): templates : Jinja2Templates = Jinja2Templates ( directory = 'apps/demo/templates' ) @site . register_admin class SimpleTemplateAdmin ( MyJinja2Admin ): page_schema = amis . PageSchema ( label = 'Jinja2' , icon = 'fa fa-link' ) template_name = 'simple.html' async def get_page ( self , request : Request ) -> Dict [ str , Any ]: return { 'current_time' : datetime . datetime . now ()} @site . register_admin class ElementTemplateAdmin ( MyJinja2Admin ): page_schema = amis . PageSchema ( label = 'ElementUI' , icon = 'fa fa-link' ) template_name = 'element.html'","title":"Example-2 (custom template management base class)"},{"location":"tutorials/basic/Inheritance/#example-3-reuse-model-management-class","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 from fastapi_amis_admin import admin from fastapi_amis_admin.models.fields import Field # Create a SQLModel model, please refer to: https://sqlmodel.tiangolo.com/ class Article ( SQLModel , table = True ): id : int = Field ( default = None , primary_key = True , nullable = False ) title : str = Field ( title = 'ArticleTitle' , max_length = 200 ) description : Optional [ str ] = Field ( default = '' , title = 'ArticleDescription' , max_length = 400 ) status : bool = Field ( None , title = 'status' ) content : str = Field ( title = 'ArticleContent' ) category_id : Optional [ int ] = Field ( default = None , foreign_key = \"category.id\" , title = 'CategoryId' ) is_active : bool = False @site . register_admin class ArticleAdmin ( admin . ModelAdmin ): page_schema = 'article management' model = Article # Set the fields to display list_display = [ Article . id , Article . title , Article . description , Article . status , Category . name ] # Set up fuzzy search field search_fields = [ Article . title , Category . name ] # custom base selector async def get_select ( self , request : Request ) -> Select : stmt = await super () . get_select ( request ) return stmt . outerjoin ( Category , Article . category_id == Category . id ) @site . register_admin class ActiveArticle ( ArticleAdmin ): \"\"\"Inheritance and reuse of `ArticleAdmin`; this example is relatively simple, the actual application may be more complex.\"\"\" # custom route prefix router_prefix = '/article.active' # Override the base selector async def get_select ( self , request : Request ) -> Select : stmt = await super () . get_select ( request ) return stmt . where ( Article . is_active == True )","title":"Example-3 (reuse model management class)"},{"location":"tutorials/basic/Inheritance/#example-4-custom-management-application","text":"\u53c2\u8003: fastapi_user_auth.UserAuthApp","title":"Example-4 (custom management application)"},{"location":"tutorials/basic/Inheritance/#example-5-custom-admin-site","text":"Reference: Basic Tutorial->Site Configuration->Custom Management Site \u53c2\u8003: fastapi_user_auth.AuthAdminSite","title":"Example-5 (custom admin site)"},{"location":"tutorials/basic/ModelAction/","text":"Model Actions \u00b6 A model management action is an action that is performed on one or more model data. For example, the most basic actions are add/read/update/delete; but often you may need to add some special commands. For example: change data state, perform certain tasks. In this case you can add custom model management actions. fastapi_amis_admin There are many types of model actions, here is a brief demonstration of a few of them that may be commonly used. Custom toolbar actions \u00b6 Example-1 \u00b6 @site . register_admin class ArticleAdmin ( admin . ModelAdmin ): group_schema = 'Articles' page_schema = PageSchema ( label = 'Article Admin' , icon = 'fa fa-file' ) model = Article # Add custom toolbar actions async def get_actions_on_header_toolbar ( self , request : Request ) -> List [ Action ]: actions = await super () . get_actions_on_header_toolbar ( request ) actions . append ( ActionType . Ajax ( label = 'toolbar ajax action' , api = 'https://3xsw4ap8wah59.cfc-execute.bj.baidubce.com/api/amis-mock/mock2/form/saveForm' )) actions . append ( ActionType . Link ( label = 'Toolbar link action' , link = 'https://github.com/amisadmin/fastapi_amis_admin' )) return actions In this example, two simple model actions are added to the model list form toolbar by overriding the get_actions_on_header_toolbar method: ActionType.Ajax action will send an ajax request to the specified api. 2. ActionType.Link action will jump to the specified link when clicked. About ActionType ActionType is actually a python model mapping of the amis Action behavior button component, which supports many common behavior types. For example: ajax request/download request/jump link/send email/bounce window/drawer/copy text etc. fastapi_amis_admin is flexible because it is based on amis component-based development, you can freely replace or add built-in amis components in many places. Before that, I hope you can read the amis documentation to have some understanding of the core components of amis. Customizing individual actions \u00b6 Example-2 \u00b6 ## Create a normal ajax action class TestAction ( admin . ModelAction ): ## Configure action basic information action = ActionType . Dialog ( label = 'Custom General Handling Action' , dialog = Dialog ()) # Action handling async def handle ( self , request : Request , item_id : List [ str ], data : Optional [ BaseModel ], ** kwargs ): # Get a list of data selected by the user from the database items = await self . fetch_item_scalars ( item_id ) # Perform action processing ... # Return the result of the action processing return BaseApiOut ( data = dict ( item_id = item_id , data = data , items = list ( items )))) @site . register_admin class ArticleAdmin ( admin . ModelAdmin ): group_schema = 'Articles' page_schema = PageSchema ( label = 'article_admin' , icon = 'fa fa-file' ) model = Article # Add a custom single action async def get_actions_on_item ( self , request : Request ) -> List [ Action ]: actions = await super () . get_actions_on_item ( request ) action = await self . test_action . get_action ( request ) actions . append ( action ) return actions # Register a custom route def register_router ( self ): super () . register_router () # Register action routes self . test_action = TestAction ( self ) . register_router () The work done in Example-2: Defines a very basic model action class TestAction , whose core is the handle method. Please refer to: ModelAction By overriding the register_router method, the TestAction class is instantiated and the route is registered and bound to the current ModelAction class property field. Override the get_actions_on_item method to add the model actions corresponding to the TestAction instance to the list of single action actions. Customizing Bulk Actions \u00b6 Example-3 \u00b6 from fastapi_amis_admin import admin ## Create form ajax action class TestFormAction ( admin . ModelAction ): # Configure action basic information Dialog ( label = 'Custom Form Action' , dialog = Dialog ()) # Create action form data model class schema ( BaseModel ): username : str = Field ( ... , title = 'username' ) password : str = Field ( ... , title = 'password' , amis_form_item = 'input-password' ) is_active : bool = Field ( True , title = 'Active or not' ) # Action handling async def handle ( self , request : Request , item_id : List [ str ], data : schema , ** kwargs ): # Get a list of data selected by the user from the database items = await self . fetch_item_scalars ( item_id ) # Perform action processing ... # Return the result of the action processing return BaseApiOut ( data = dict ( item_id = item_id , data = data , items = list ( items )))) @site . register_admin class ArticleAdmin ( admin . ModelAdmin ): group_schema = 'Articles' page_schema = PageSchema ( label = 'article_admin' , icon = 'fa fa-file' ) model = Article # Add custom bulk actions async def get_actions_on_bulk ( self , request : Request ) -> List [ Action ]: actions = await super () . get_actions_on_bulk ( request ) action = await self . test_form_action . get_action ( request ) action . label = 'Custom Bulk Action' actions . append ( action . copy ()) return actions # Register a custom route def register_router ( self ): super () . register_router () # Register action routes self . test_form_action = TestFormAction ( self ) . register_router () Example-3 is very similar to Example-2, but it allows the user to add a custom form, which is very useful in many cases. The definition and use of schema is very similar to FormAdmin . For more usage \u00b6 Please refer to the demo program , or read the following related documentation, which should help you. ModelAdmin ModelAction Action behavior button","title":"Model Actions"},{"location":"tutorials/basic/ModelAction/#model-actions","text":"A model management action is an action that is performed on one or more model data. For example, the most basic actions are add/read/update/delete; but often you may need to add some special commands. For example: change data state, perform certain tasks. In this case you can add custom model management actions. fastapi_amis_admin There are many types of model actions, here is a brief demonstration of a few of them that may be commonly used.","title":"Model Actions"},{"location":"tutorials/basic/ModelAction/#custom-toolbar-actions","text":"","title":"Custom toolbar actions"},{"location":"tutorials/basic/ModelAction/#example-1","text":"@site . register_admin class ArticleAdmin ( admin . ModelAdmin ): group_schema = 'Articles' page_schema = PageSchema ( label = 'Article Admin' , icon = 'fa fa-file' ) model = Article # Add custom toolbar actions async def get_actions_on_header_toolbar ( self , request : Request ) -> List [ Action ]: actions = await super () . get_actions_on_header_toolbar ( request ) actions . append ( ActionType . Ajax ( label = 'toolbar ajax action' , api = 'https://3xsw4ap8wah59.cfc-execute.bj.baidubce.com/api/amis-mock/mock2/form/saveForm' )) actions . append ( ActionType . Link ( label = 'Toolbar link action' , link = 'https://github.com/amisadmin/fastapi_amis_admin' )) return actions In this example, two simple model actions are added to the model list form toolbar by overriding the get_actions_on_header_toolbar method: ActionType.Ajax action will send an ajax request to the specified api. 2. ActionType.Link action will jump to the specified link when clicked. About ActionType ActionType is actually a python model mapping of the amis Action behavior button component, which supports many common behavior types. For example: ajax request/download request/jump link/send email/bounce window/drawer/copy text etc. fastapi_amis_admin is flexible because it is based on amis component-based development, you can freely replace or add built-in amis components in many places. Before that, I hope you can read the amis documentation to have some understanding of the core components of amis.","title":"Example-1"},{"location":"tutorials/basic/ModelAction/#customizing-individual-actions","text":"","title":"Customizing individual actions"},{"location":"tutorials/basic/ModelAction/#example-2","text":"## Create a normal ajax action class TestAction ( admin . ModelAction ): ## Configure action basic information action = ActionType . Dialog ( label = 'Custom General Handling Action' , dialog = Dialog ()) # Action handling async def handle ( self , request : Request , item_id : List [ str ], data : Optional [ BaseModel ], ** kwargs ): # Get a list of data selected by the user from the database items = await self . fetch_item_scalars ( item_id ) # Perform action processing ... # Return the result of the action processing return BaseApiOut ( data = dict ( item_id = item_id , data = data , items = list ( items )))) @site . register_admin class ArticleAdmin ( admin . ModelAdmin ): group_schema = 'Articles' page_schema = PageSchema ( label = 'article_admin' , icon = 'fa fa-file' ) model = Article # Add a custom single action async def get_actions_on_item ( self , request : Request ) -> List [ Action ]: actions = await super () . get_actions_on_item ( request ) action = await self . test_action . get_action ( request ) actions . append ( action ) return actions # Register a custom route def register_router ( self ): super () . register_router () # Register action routes self . test_action = TestAction ( self ) . register_router () The work done in Example-2: Defines a very basic model action class TestAction , whose core is the handle method. Please refer to: ModelAction By overriding the register_router method, the TestAction class is instantiated and the route is registered and bound to the current ModelAction class property field. Override the get_actions_on_item method to add the model actions corresponding to the TestAction instance to the list of single action actions.","title":"Example-2"},{"location":"tutorials/basic/ModelAction/#customizing-bulk-actions","text":"","title":"Customizing Bulk Actions"},{"location":"tutorials/basic/ModelAction/#example-3","text":"from fastapi_amis_admin import admin ## Create form ajax action class TestFormAction ( admin . ModelAction ): # Configure action basic information Dialog ( label = 'Custom Form Action' , dialog = Dialog ()) # Create action form data model class schema ( BaseModel ): username : str = Field ( ... , title = 'username' ) password : str = Field ( ... , title = 'password' , amis_form_item = 'input-password' ) is_active : bool = Field ( True , title = 'Active or not' ) # Action handling async def handle ( self , request : Request , item_id : List [ str ], data : schema , ** kwargs ): # Get a list of data selected by the user from the database items = await self . fetch_item_scalars ( item_id ) # Perform action processing ... # Return the result of the action processing return BaseApiOut ( data = dict ( item_id = item_id , data = data , items = list ( items )))) @site . register_admin class ArticleAdmin ( admin . ModelAdmin ): group_schema = 'Articles' page_schema = PageSchema ( label = 'article_admin' , icon = 'fa fa-file' ) model = Article # Add custom bulk actions async def get_actions_on_bulk ( self , request : Request ) -> List [ Action ]: actions = await super () . get_actions_on_bulk ( request ) action = await self . test_form_action . get_action ( request ) action . label = 'Custom Bulk Action' actions . append ( action . copy ()) return actions # Register a custom route def register_router ( self ): super () . register_router () # Register action routes self . test_form_action = TestFormAction ( self ) . register_router () Example-3 is very similar to Example-2, but it allows the user to add a custom form, which is very useful in many cases. The definition and use of schema is very similar to FormAdmin .","title":"Example-3"},{"location":"tutorials/basic/ModelAction/#for-more-usage","text":"Please refer to the demo program , or read the following related documentation, which should help you. ModelAdmin ModelAction Action behavior button","title":"For more usage"},{"location":"tutorials/basic/ModelAdmin/","text":"Model Management \u00b6 Model management is the most commonly used management class in background management, and its functions are also the most abundant. fastapi-amis-admin has implemented various basic operations commonly used for data models, and you can still make on this basis. More personalized extensions. Example-1 \u00b6 # First create a SQLModel model, please refer to: https://sqlmodel.tiangolo.com/ class Category ( SQLModel , table = True ): id : int = Field ( default = None , primary_key = True , nullable = False ) name : str = Field ( title = 'CategoryName' ) description : str = Field ( default = '' , title = 'Description' ) # Register ModelAdmin @site . register_admin class CategoryAdmin ( admin . ModelAdmin ): page_schema = 'Category Management' # Configuration management model model = Category Let's take a look at this simple example-1. It completes the following steps: Define a Category model. Define a model management class that inherits admin.ModelAdmin . Configure the model and register to the management site. About the SQLModel model In fact, this part of the code does not belong to the amis-admin code, because it can be reused anywhere ORM mapping is required, in the project you should define a separate models.py file to write this part of the code. SQLModel is a very good Python ORM library, written by the same author of FastAPI, which perfectly combines SQLAlchemy and Pydantic. Please read its official documentation: https://sqlmodel.tiangolo.com/ Example-2 \u00b6 # Create a SQLModel model, please refer to: https://sqlmodel.tiangolo.com/ class Article ( SQLModel , table = True ): id : int = Field ( default = None , primary_key = True , nullable = False ) title : str = Field ( title = 'ArticleTitle' , max_length = 200 ) description : Optional [ str ] = Field ( default = '' , title = 'ArticleDescription' , max_length = 400 ) status : bool = Field ( None , title = 'status' ) content : str = Field ( title = 'ArticleContent' ) # Associate Category model, model definition reference [Example-1] category_id : Optional [ int ] = Field ( default = None , foreign_key = \"category.id\" , title = 'CategoryId' ) # category: Optional[Category] = Relationship(back_populates=\"articles\") @site . register_admin class ArticleAdmin ( admin . ModelAdmin ): page_schema = 'article management' model = Article # Set the fields to display list_display = [ Article . id , Article . title , Article . description , Article . status , Category . name ] # Set up fuzzy search field search_fields = [ Article . title , Category . name ] # custom base selector async def get_select ( self , request : Request ) -> Select : stmt = await super () . get_select ( request ) return stmt . outerjoin ( Category , Article . category_id == Category . id ) Example 2 is more complicated than Example 1. But if you are familiar with Django-Admin you will find they are very similar, yes. fastapi_amis_admin is inspired by Django-Admin , so many functions are designed with is similar, and fastapi_amis_admin The functions are more abundant and the configuration is more flexible. Configure display fields \u00b6 By default, the management list will display all fields of the current model. But if you only need to display some fields, or you also need to display other fields of related models, you can customize the fields to be displayed by configuring list_display . For example in example 2: Article.content and Article.category_id are not included in the display field. Category.name is a field of another model and can also be included in the display field, but here you need to customize the selector left join Category model through the get_select method. Configure fuzzy search fields \u00b6 search_fields configures the query method for string fields as like filtering. If search_fields is not configured, the default is equal query method. Custom selector \u00b6 The get_select custom selector can achieve different initial data query conditions for different requests, similar to the get_queryset method in django-admin . function list \u00b6 Currently, the model management class ModelAdmin in fastapi-amis-admin has supported functions including but not limited to the following list. Function Related Fields or Methods Remarks Custom bulk query fields fields , exclude Custom batch query display fields list_display , get_list_display Support display types are picture, audio, video, list, Json Custom batch query filter form list_filter Support text exact/fuzzy matching, time range filtering, multiple selection filtering Custom batch query sorting field ordering Custom model primary key pk_name Custom bulk query selector get_select Support Jion other database table models Custom Model Database engine Custom batch query read-only fields readonly_fields Customize batch query data volume per page list_per_page Custom bulk query fuzzy search fields search_fields Customize fields for new models create_fields Customize fields that support editing update_fields Customize fields that support bulk editing bulk_update_fields Customize the new model data form get_create_form Custom update model data form get_update_form Customize the new model data execution action get_create_action Custom update model data execution action get_update_action Custom delete model data execution action get_delete_action Custom batch query data return protocol schema_list Customize batch query data filtering submission protocol schema_filter Custom Create Data Submission Protocol schema_create Custom read data return protocol schema_read Custom update data submission protocol schema_update Custom batch query permission has_list_permission Custom single query permission has_read_permission Custom create data permission has_create_permission Custom update data permission has_update_permission Custom delete data permission has_delete_permission More usage \u00b6 The usage of ModelAdmin is very flexible, only the most basic usage is shown here, you can read the API documentation Or refer to the demo program for more detailed usage. Examples of specific application scenarios will be added in the future. If you have better application examples or tutorial documents, you can submit them through github, thank you very much for your support! fastapi_amis_admin will do better! FastAPI-Amis-Admin-Demo FastAPI-User-Auth-Demo ModelAdmin - FastAPI-Amis-Admin SQLModelCrud - FastAPI-Amis-Admin Table \u8868\u683c (gitee.io) About fastapi_amis_admin and django-admin django-admin is a very mature and powerful web management background tool, users who use django should often use it, But he is not suitable for non-django projects, which is one of the main reasons why fastapi_amis_admin was born. Fastapi_amis_admin has more extensions and functions than django-admin, but fastapi_amis_admin is still in the growth stage, many functions are immature, and need long-term continuous improvement and upgrading. I look forward to your participation in fastapi_amis_admin , contribute code to the project, or provide suggestions .","title":"Model Management"},{"location":"tutorials/basic/ModelAdmin/#model-management","text":"Model management is the most commonly used management class in background management, and its functions are also the most abundant. fastapi-amis-admin has implemented various basic operations commonly used for data models, and you can still make on this basis. More personalized extensions.","title":"Model Management"},{"location":"tutorials/basic/ModelAdmin/#example-1","text":"# First create a SQLModel model, please refer to: https://sqlmodel.tiangolo.com/ class Category ( SQLModel , table = True ): id : int = Field ( default = None , primary_key = True , nullable = False ) name : str = Field ( title = 'CategoryName' ) description : str = Field ( default = '' , title = 'Description' ) # Register ModelAdmin @site . register_admin class CategoryAdmin ( admin . ModelAdmin ): page_schema = 'Category Management' # Configuration management model model = Category Let's take a look at this simple example-1. It completes the following steps: Define a Category model. Define a model management class that inherits admin.ModelAdmin . Configure the model and register to the management site. About the SQLModel model In fact, this part of the code does not belong to the amis-admin code, because it can be reused anywhere ORM mapping is required, in the project you should define a separate models.py file to write this part of the code. SQLModel is a very good Python ORM library, written by the same author of FastAPI, which perfectly combines SQLAlchemy and Pydantic. Please read its official documentation: https://sqlmodel.tiangolo.com/","title":"Example-1"},{"location":"tutorials/basic/ModelAdmin/#example-2","text":"# Create a SQLModel model, please refer to: https://sqlmodel.tiangolo.com/ class Article ( SQLModel , table = True ): id : int = Field ( default = None , primary_key = True , nullable = False ) title : str = Field ( title = 'ArticleTitle' , max_length = 200 ) description : Optional [ str ] = Field ( default = '' , title = 'ArticleDescription' , max_length = 400 ) status : bool = Field ( None , title = 'status' ) content : str = Field ( title = 'ArticleContent' ) # Associate Category model, model definition reference [Example-1] category_id : Optional [ int ] = Field ( default = None , foreign_key = \"category.id\" , title = 'CategoryId' ) # category: Optional[Category] = Relationship(back_populates=\"articles\") @site . register_admin class ArticleAdmin ( admin . ModelAdmin ): page_schema = 'article management' model = Article # Set the fields to display list_display = [ Article . id , Article . title , Article . description , Article . status , Category . name ] # Set up fuzzy search field search_fields = [ Article . title , Category . name ] # custom base selector async def get_select ( self , request : Request ) -> Select : stmt = await super () . get_select ( request ) return stmt . outerjoin ( Category , Article . category_id == Category . id ) Example 2 is more complicated than Example 1. But if you are familiar with Django-Admin you will find they are very similar, yes. fastapi_amis_admin is inspired by Django-Admin , so many functions are designed with is similar, and fastapi_amis_admin The functions are more abundant and the configuration is more flexible.","title":"Example-2"},{"location":"tutorials/basic/ModelAdmin/#configure-display-fields","text":"By default, the management list will display all fields of the current model. But if you only need to display some fields, or you also need to display other fields of related models, you can customize the fields to be displayed by configuring list_display . For example in example 2: Article.content and Article.category_id are not included in the display field. Category.name is a field of another model and can also be included in the display field, but here you need to customize the selector left join Category model through the get_select method.","title":"Configure display fields"},{"location":"tutorials/basic/ModelAdmin/#configure-fuzzy-search-fields","text":"search_fields configures the query method for string fields as like filtering. If search_fields is not configured, the default is equal query method.","title":"Configure fuzzy search fields"},{"location":"tutorials/basic/ModelAdmin/#custom-selector","text":"The get_select custom selector can achieve different initial data query conditions for different requests, similar to the get_queryset method in django-admin .","title":"Custom selector"},{"location":"tutorials/basic/ModelAdmin/#function-list","text":"Currently, the model management class ModelAdmin in fastapi-amis-admin has supported functions including but not limited to the following list. Function Related Fields or Methods Remarks Custom bulk query fields fields , exclude Custom batch query display fields list_display , get_list_display Support display types are picture, audio, video, list, Json Custom batch query filter form list_filter Support text exact/fuzzy matching, time range filtering, multiple selection filtering Custom batch query sorting field ordering Custom model primary key pk_name Custom bulk query selector get_select Support Jion other database table models Custom Model Database engine Custom batch query read-only fields readonly_fields Customize batch query data volume per page list_per_page Custom bulk query fuzzy search fields search_fields Customize fields for new models create_fields Customize fields that support editing update_fields Customize fields that support bulk editing bulk_update_fields Customize the new model data form get_create_form Custom update model data form get_update_form Customize the new model data execution action get_create_action Custom update model data execution action get_update_action Custom delete model data execution action get_delete_action Custom batch query data return protocol schema_list Customize batch query data filtering submission protocol schema_filter Custom Create Data Submission Protocol schema_create Custom read data return protocol schema_read Custom update data submission protocol schema_update Custom batch query permission has_list_permission Custom single query permission has_read_permission Custom create data permission has_create_permission Custom update data permission has_update_permission Custom delete data permission has_delete_permission","title":"function list"},{"location":"tutorials/basic/ModelAdmin/#more-usage","text":"The usage of ModelAdmin is very flexible, only the most basic usage is shown here, you can read the API documentation Or refer to the demo program for more detailed usage. Examples of specific application scenarios will be added in the future. If you have better application examples or tutorial documents, you can submit them through github, thank you very much for your support! fastapi_amis_admin will do better! FastAPI-Amis-Admin-Demo FastAPI-User-Auth-Demo ModelAdmin - FastAPI-Amis-Admin SQLModelCrud - FastAPI-Amis-Admin Table \u8868\u683c (gitee.io) About fastapi_amis_admin and django-admin django-admin is a very mature and powerful web management background tool, users who use django should often use it, But he is not suitable for non-django projects, which is one of the main reasons why fastapi_amis_admin was born. Fastapi_amis_admin has more extensions and functions than django-admin, but fastapi_amis_admin is still in the growth stage, many functions are immature, and need long-term continuous improvement and upgrading. I look forward to your participation in fastapi_amis_admin , contribute code to the project, or provide suggestions .","title":"More usage"},{"location":"tutorials/basic/PageAdmin/","text":"Page Management \u00b6 fastapi-amis-admin supports many types of page management, allowing you to implement almost any complex backend page management scenario. The examples in this tutorial all default to you having completed the first step quickstart . That is: have defined the management site object site and successfully run the project. If your registered administrative object is not displayed, please check if you have imported the corresponding module before site.mount_app(app) . Page Management \u00b6 PageAdmin implements to display a menu in the menu list. Clicking on the menu will display an amis page. You can read the baidu-amis official documentation to implement various complex page displays. First look at a Hello World page example it . @site . register_admin class HelloWorldPageAdmin ( admin . PageAdmin ): page_schema = 'Hello World Page' # Configure page information directly through the page class property; page = Page ( title = 'Title' , body = 'Hello World!' ) Very simple, right, then implement a page to get the current time. @site . register_admin class CurrentTimePageAdmin ( admin . PageAdmin ): page_schema = 'Current Time Page' # Get page information dynamically via get_page class method. async def get_page ( self , request : Request ) -> Page : page = await super () . get_page ( request ) page . body = 'The current time is: ' + time . strftime ( '%Y-%m- %d %H:%M:%S' ) return page In this example, instead of configuring static page information through the page object, the information is obtained dynamically through the get_page method, There are many similar implementations in fastapi-amis-admin , if you need to dynamically configure certain information, It is recommended that you do this by overloading the corresponding methods, but it is recommended that in most cases, please call the methods of the parent class first. Register admin page with Amis syntax compliant Json @site . register_admin class AmisPageAdmin ( admin . PageAdmin ): page_schema = 'Amis Json Page' page = Page . parse_obj ( { \"type\" : \"page\" , \"title\" : \"form page\" , \"body\" : { \"type\" : \"form\" , \"mode\" : \"horizontal\" , \"api\" : \"/saveForm\" , \"body\" : [ { \"label\" : \"Name\" , \"type\" : \"input-text\" , \"name\" : \"name\" }, { \"label\" : \"Email\" , \"type\" : \"input-email\" , \"name\" : \"email\" } ] } } ) Link Admin \u00b6 LinkAdmin implements a link jumping menu in the menu list. Clicking on the menu will access the set link by opening a new browser tab: from fastapi_amis_admin.admin import admin from fastapi_amis_admin.amis import PageSchema @site . register_admin class GitHubLinkAdmin ( admin . LinkAdmin ): # Set the page menu information via the page_schema class property; # PageSchema component support properties reference: https://baidu.gitee.io/amis/zh-CN/components/app page_schema = PageSchema ( label = 'AmisLinkAdmin' , icon = 'fa fa-github' ) # Set the jump link link = 'https://github.com/amisadmin/fastapi_amis_admin' The above example is a simple page admin class, which does the following steps. 1: Define a page admin class, inheriting from admin.LinkAdmin . About the built-in BaseAdmin base class, see: BaseAdmin configure the menu information through the page_schema field. Here only configure the menu label and icon, you can read the relevant documentation, configure more custom information. 3. specify the links to jump to via the link field. 2. The last step, you must register the administrative class to the administrative site through the site.register_admin decorator. Iframe Admin \u00b6 The IframeAdmin implementation displays a menu in the menu list. Click on the menu will be embedded in the current page through a frame, access to set the link. Usage is very similar to LinkAdmin , the only difference is the way the link is opened. @site . register_admin class ReDocsAdmin ( admin . IframeAdmin ): # Set the page menu group information group_schema = PageSchema ( label = 'APIDocs' , sort =- 100 ) # Set page menu information page_schema = PageSchema ( label = 'Redocs' , icon = 'fa fa-book' ) # Set the jump link @property def src ( self ): return self . app . site . settings . site_url + '/redoc' The above example is a more carefully configured IframeAdmin page administration class that does the following: configure the menu group information through the group_schema field, set the label of the menu group, and the menu group display position sorting. 2. set the Iframe jump link through the src dynamic field. about self.app.site.settings.site_url means: the root path of the administrative site where the current class instance is located. Seems complicated, but in fact it is very easy to understand and may be useful in future development. It is recommended to read through BaseAdmin to understand the architecture of amis-admin and the common administrative class objects have fields and methods, which will be very useful for future development and application.","title":"Page Management"},{"location":"tutorials/basic/PageAdmin/#page-management","text":"fastapi-amis-admin supports many types of page management, allowing you to implement almost any complex backend page management scenario. The examples in this tutorial all default to you having completed the first step quickstart . That is: have defined the management site object site and successfully run the project. If your registered administrative object is not displayed, please check if you have imported the corresponding module before site.mount_app(app) .","title":"Page Management"},{"location":"tutorials/basic/PageAdmin/#page-management_1","text":"PageAdmin implements to display a menu in the menu list. Clicking on the menu will display an amis page. You can read the baidu-amis official documentation to implement various complex page displays. First look at a Hello World page example it . @site . register_admin class HelloWorldPageAdmin ( admin . PageAdmin ): page_schema = 'Hello World Page' # Configure page information directly through the page class property; page = Page ( title = 'Title' , body = 'Hello World!' ) Very simple, right, then implement a page to get the current time. @site . register_admin class CurrentTimePageAdmin ( admin . PageAdmin ): page_schema = 'Current Time Page' # Get page information dynamically via get_page class method. async def get_page ( self , request : Request ) -> Page : page = await super () . get_page ( request ) page . body = 'The current time is: ' + time . strftime ( '%Y-%m- %d %H:%M:%S' ) return page In this example, instead of configuring static page information through the page object, the information is obtained dynamically through the get_page method, There are many similar implementations in fastapi-amis-admin , if you need to dynamically configure certain information, It is recommended that you do this by overloading the corresponding methods, but it is recommended that in most cases, please call the methods of the parent class first. Register admin page with Amis syntax compliant Json @site . register_admin class AmisPageAdmin ( admin . PageAdmin ): page_schema = 'Amis Json Page' page = Page . parse_obj ( { \"type\" : \"page\" , \"title\" : \"form page\" , \"body\" : { \"type\" : \"form\" , \"mode\" : \"horizontal\" , \"api\" : \"/saveForm\" , \"body\" : [ { \"label\" : \"Name\" , \"type\" : \"input-text\" , \"name\" : \"name\" }, { \"label\" : \"Email\" , \"type\" : \"input-email\" , \"name\" : \"email\" } ] } } )","title":"Page Management"},{"location":"tutorials/basic/PageAdmin/#link-admin","text":"LinkAdmin implements a link jumping menu in the menu list. Clicking on the menu will access the set link by opening a new browser tab: from fastapi_amis_admin.admin import admin from fastapi_amis_admin.amis import PageSchema @site . register_admin class GitHubLinkAdmin ( admin . LinkAdmin ): # Set the page menu information via the page_schema class property; # PageSchema component support properties reference: https://baidu.gitee.io/amis/zh-CN/components/app page_schema = PageSchema ( label = 'AmisLinkAdmin' , icon = 'fa fa-github' ) # Set the jump link link = 'https://github.com/amisadmin/fastapi_amis_admin' The above example is a simple page admin class, which does the following steps. 1: Define a page admin class, inheriting from admin.LinkAdmin . About the built-in BaseAdmin base class, see: BaseAdmin configure the menu information through the page_schema field. Here only configure the menu label and icon, you can read the relevant documentation, configure more custom information. 3. specify the links to jump to via the link field. 2. The last step, you must register the administrative class to the administrative site through the site.register_admin decorator.","title":"Link Admin"},{"location":"tutorials/basic/PageAdmin/#iframe-admin","text":"The IframeAdmin implementation displays a menu in the menu list. Click on the menu will be embedded in the current page through a frame, access to set the link. Usage is very similar to LinkAdmin , the only difference is the way the link is opened. @site . register_admin class ReDocsAdmin ( admin . IframeAdmin ): # Set the page menu group information group_schema = PageSchema ( label = 'APIDocs' , sort =- 100 ) # Set page menu information page_schema = PageSchema ( label = 'Redocs' , icon = 'fa fa-book' ) # Set the jump link @property def src ( self ): return self . app . site . settings . site_url + '/redoc' The above example is a more carefully configured IframeAdmin page administration class that does the following: configure the menu group information through the group_schema field, set the label of the menu group, and the menu group display position sorting. 2. set the Iframe jump link through the src dynamic field. about self.app.site.settings.site_url means: the root path of the administrative site where the current class instance is located. Seems complicated, but in fact it is very easy to understand and may be useful in future development. It is recommended to read through BaseAdmin to understand the architecture of amis-admin and the common administrative class objects have fields and methods, which will be very useful for future development and application.","title":"Iframe Admin"},{"location":"tutorials/basic/Settings/","text":"Site configuration \u00b6 AdminSite in the creation of the instance, receive settings , fastapi , engine three basic parameters. Through these three basic parameters, you can already meet most of the custom configuration needs. If you need more personalized configuration, you can inherit the AdminSite class for more rich configuration. Basic configuration \u00b6 settings receives a Settings object, which can be configured whether the current site is open for debugging, mount path, database connection, CDN address, Amis version number and so on. Reference: Settings FastAPI application \u00b6 The AdminSite object maintains a fastapi application object inside, which you can configure through the fastapi parameter: whether to enable debugging api document path Start/stop application events Registering dependencies Other FastAPI configurations, refer to: FastAPI Database configuration \u00b6 The AdminSite object also maintains an internal sqlalchemy asynchronous client, and you can provide a custom asynchronous database engine via the engine parameter. Example-1 \u00b6 from fastapi import FastAPI from fastapi_amis_admin.admin.settings import Settings from fastapi_amis_admin.admin.site import AdminSite site = AdminSite ( # Basic configuration settings = Settings ( debug = True , database_url_async = 'sqlite+aiosqlite:///amisadmin.db' ), # fastapi related configuration fastapi = FastAPI ( debug = True , docs_url = '/admin_docs' , redoc_url = '/admin_redoc' ) ) Customizing the admin site \u00b6 Admin site rewriting can achieve very free and rich site configuration, such as changing the backend interface template, adding/removing default administrative classes or administrative applications, changing static resource links, etc.. Example-2 \u00b6 from fastapi import FastAPI , Request from fastapi_amis_admin.admin.settings import Settings from fastapi_amis_admin.admin.site import AdminSite , ReDocsAdmin , DocsAdmin from sqlalchemy.ext.asyncio import AsyncEngine from fastapi_amis_admin.amis.components import App # Custom backend administration site class NewAdminSite ( AdminSite ): # custom application template, copy the original template file to modify the original path: fastapi_amis_admin/amis/templates/app.html template_name = '/templates/new_app.html' def __init__ ( self , settings : Settings , fastapi : FastAPI = None , engine : AsyncEngine = None ): super () . __init__ ( settings , fastapi , engine ) # Unregister the default admin class self . unregister_admin ( DocsAdmin , ReDocsAdmin ) async def get_page ( self , request : Request ) -> App : app = await super () . get_page ( request ) # Custom site name, logo information, reference: https://baidu.gitee.io/amis/zh-CN/components/app app . brandName = 'MyAdminSite' app . logo = 'https://baidu.gitee.io/amis/static/logo_408c434.png' return app # Create a backend management system instance with a custom admin site class site = NewAdminSite ( settings = Settings ( debug = True , database_url_async = 'sqlite+aiosqlite:///amisadmin.db' )) By modifying the template_name field, you can customize the backend interface template. For example: modify the static resource link to speed up web access, modify the backend display style. About customizing the admin site Admin site inheritance rewrite is an advanced feature, it is recommended to rewrite only if you know enough about fastapi_amis_admin. You are free to modify the backend administration interface, but please respect the development achievements of fastapi_amis_admin team and show the copyright information about FastAPI-Amis-Admin clearly in the display interface.","title":"Site configuration"},{"location":"tutorials/basic/Settings/#site-configuration","text":"AdminSite in the creation of the instance, receive settings , fastapi , engine three basic parameters. Through these three basic parameters, you can already meet most of the custom configuration needs. If you need more personalized configuration, you can inherit the AdminSite class for more rich configuration.","title":"Site configuration"},{"location":"tutorials/basic/Settings/#basic-configuration","text":"settings receives a Settings object, which can be configured whether the current site is open for debugging, mount path, database connection, CDN address, Amis version number and so on. Reference: Settings","title":"Basic configuration"},{"location":"tutorials/basic/Settings/#fastapi-application","text":"The AdminSite object maintains a fastapi application object inside, which you can configure through the fastapi parameter: whether to enable debugging api document path Start/stop application events Registering dependencies Other FastAPI configurations, refer to: FastAPI","title":"FastAPI application"},{"location":"tutorials/basic/Settings/#database-configuration","text":"The AdminSite object also maintains an internal sqlalchemy asynchronous client, and you can provide a custom asynchronous database engine via the engine parameter.","title":"Database configuration"},{"location":"tutorials/basic/Settings/#example-1","text":"from fastapi import FastAPI from fastapi_amis_admin.admin.settings import Settings from fastapi_amis_admin.admin.site import AdminSite site = AdminSite ( # Basic configuration settings = Settings ( debug = True , database_url_async = 'sqlite+aiosqlite:///amisadmin.db' ), # fastapi related configuration fastapi = FastAPI ( debug = True , docs_url = '/admin_docs' , redoc_url = '/admin_redoc' ) )","title":"Example-1"},{"location":"tutorials/basic/Settings/#customizing-the-admin-site","text":"Admin site rewriting can achieve very free and rich site configuration, such as changing the backend interface template, adding/removing default administrative classes or administrative applications, changing static resource links, etc..","title":"Customizing the admin site"},{"location":"tutorials/basic/Settings/#example-2","text":"from fastapi import FastAPI , Request from fastapi_amis_admin.admin.settings import Settings from fastapi_amis_admin.admin.site import AdminSite , ReDocsAdmin , DocsAdmin from sqlalchemy.ext.asyncio import AsyncEngine from fastapi_amis_admin.amis.components import App # Custom backend administration site class NewAdminSite ( AdminSite ): # custom application template, copy the original template file to modify the original path: fastapi_amis_admin/amis/templates/app.html template_name = '/templates/new_app.html' def __init__ ( self , settings : Settings , fastapi : FastAPI = None , engine : AsyncEngine = None ): super () . __init__ ( settings , fastapi , engine ) # Unregister the default admin class self . unregister_admin ( DocsAdmin , ReDocsAdmin ) async def get_page ( self , request : Request ) -> App : app = await super () . get_page ( request ) # Custom site name, logo information, reference: https://baidu.gitee.io/amis/zh-CN/components/app app . brandName = 'MyAdminSite' app . logo = 'https://baidu.gitee.io/amis/static/logo_408c434.png' return app # Create a backend management system instance with a custom admin site class site = NewAdminSite ( settings = Settings ( debug = True , database_url_async = 'sqlite+aiosqlite:///amisadmin.db' )) By modifying the template_name field, you can customize the backend interface template. For example: modify the static resource link to speed up web access, modify the backend display style. About customizing the admin site Admin site inheritance rewrite is an advanced feature, it is recommended to rewrite only if you know enough about fastapi_amis_admin. You are free to modify the backend administration interface, but please respect the development achievements of fastapi_amis_admin team and show the copyright information about FastAPI-Amis-Admin clearly in the display interface.","title":"Example-2"},{"location":"tutorials/basic/TemplateAdmin/","text":"Template Management \u00b6 In some cases, the amis page may not be convenient to achieve your complex interface display, or you prefer to use the template rendering way to display the administrative page. Then you can use TemplateAdmin to achieve your needs. Example \u00b6 @site . register_admin class SimpleTemplateAdmin ( admin :) page_schema = PageSchema ( label = 'SimpleTemplate' , icon = 'fa fa-link' ) templates : Jinja2Templates = Jinja2Templates ( directory = 'templates' ) template_name = 'simple.html' async def get_page ( self , request : Request ) -> Dict [ str , Any ]: return { 'current_time' : datetime . datetime . now ()} Configuring the template engine \u00b6 Configure the Jinja2 template engine via the templates field. Configure template files \u00b6 Configure the Jinja2 template file via the template_name field. Page rendering data \u00b6 Get page rendering data via the get_page method. More usage \u00b6 Related documentation \u00b6 TemplateAdmin fastapi_amis_admin_demo","title":"Template Management"},{"location":"tutorials/basic/TemplateAdmin/#template-management","text":"In some cases, the amis page may not be convenient to achieve your complex interface display, or you prefer to use the template rendering way to display the administrative page. Then you can use TemplateAdmin to achieve your needs.","title":"Template Management"},{"location":"tutorials/basic/TemplateAdmin/#example","text":"@site . register_admin class SimpleTemplateAdmin ( admin :) page_schema = PageSchema ( label = 'SimpleTemplate' , icon = 'fa fa-link' ) templates : Jinja2Templates = Jinja2Templates ( directory = 'templates' ) template_name = 'simple.html' async def get_page ( self , request : Request ) -> Dict [ str , Any ]: return { 'current_time' : datetime . datetime . now ()}","title":"Example"},{"location":"tutorials/basic/TemplateAdmin/#configuring-the-template-engine","text":"Configure the Jinja2 template engine via the templates field.","title":"Configuring the template engine"},{"location":"tutorials/basic/TemplateAdmin/#configure-template-files","text":"Configure the Jinja2 template file via the template_name field.","title":"Configure template files"},{"location":"tutorials/basic/TemplateAdmin/#page-rendering-data","text":"Get page rendering data via the get_page method.","title":"Page rendering data"},{"location":"tutorials/basic/TemplateAdmin/#more-usage","text":"","title":"More usage"},{"location":"tutorials/basic/TemplateAdmin/#related-documentation","text":"TemplateAdmin fastapi_amis_admin_demo","title":"Related documentation"},{"location":"tutorials/basic/_more/","text":"More to be added... \u00b6","title":"More to be added..."},{"location":"tutorials/basic/_more/#more-to-be-added","text":"","title":"More to be added..."},{"location":"tutorials/basic/i18n/","text":"Multi-language \u00b6 The multilingual support of FastAPI-Amis-Admin is divided into multilingual for the internal components of Amis on the front end and multilingual for the constant text on the back end. The default built-in support languages are: en_US , zh_CN . For other language extensions, please refer to Amis Multilanguage . From version 0.1.1 onwards, try setting the environment variable LANGUAGE / LANG > OS default language > English en_US . You can freely switch the language by adding the following code to the top of the project entry file. For example: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 from fastapi_amis_admin import i18n i18n . set_language ( language = 'zh_CN' ) from fastapi_amis_admin.admin import AdminSite , Settings from fastapi_amis_admin.amis.components import PageSchema # Create AdminSite instance site = AdminSite ( settings = admin . Settings ( database_url_async = 'sqlite+aiosqlite:///amisadmin.db' )) # Register the admin class @site . register_admin class GitHubIframeAdmin ( admin :) # Set the page menu information page_schema = PageSchema ( label = 'AmisIframeAdmin' , icon = 'fa fa-github' ) # Set the jump link src = 'https://github.com/amisadmin/fastapi_amis_admin'","title":"Multi-language"},{"location":"tutorials/basic/i18n/#multi-language","text":"The multilingual support of FastAPI-Amis-Admin is divided into multilingual for the internal components of Amis on the front end and multilingual for the constant text on the back end. The default built-in support languages are: en_US , zh_CN . For other language extensions, please refer to Amis Multilanguage . From version 0.1.1 onwards, try setting the environment variable LANGUAGE / LANG > OS default language > English en_US . You can freely switch the language by adding the following code to the top of the project entry file. For example: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 from fastapi_amis_admin import i18n i18n . set_language ( language = 'zh_CN' ) from fastapi_amis_admin.admin import AdminSite , Settings from fastapi_amis_admin.amis.components import PageSchema # Create AdminSite instance site = AdminSite ( settings = admin . Settings ( database_url_async = 'sqlite+aiosqlite:///amisadmin.db' )) # Register the admin class @site . register_admin class GitHubIframeAdmin ( admin :) # Set the page menu information page_schema = PageSchema ( label = 'AmisIframeAdmin' , icon = 'fa fa-github' ) # Set the jump link src = 'https://github.com/amisadmin/fastapi_amis_admin'","title":"Multi-language"},{"location":"utils/database/","text":"AsyncDatabase \u00b6 sqlalchemy asynchronous client fields \u00b6 engine \u00b6 - sqlalchemy asynchronous engine. \u00b6 Reference: Asynchronous I/O (asyncio) \u2014 SQLAlchemy 1.4 Documentation Example: from sqlalchemy.ext.asyncio import create_async_engine engine = create_async_engine ( \"sqlite+aiosqlite:///amisadmin.db\" , future = True ) # engine = create_async_engine(\"mysql+aiomysql://amisadmin:amisadmin@127.0.0.1:3306/amisadmin?charset=utf8mb4\", future=True) # engine = create_async_engine(\"postgresql+asyncpg://user:pass@host/dbname\", future=True) session_maker \u00b6 self . session_maker : sessionmaker = sessionmaker ( self . async_engine , class_ = AsyncSession , autoflush = False ) method: \u00b6 session_generator \u00b6 async def session_generator ( self ) -> AsyncGenerator [ AsyncSession , Any ]: async with self . session_maker () as session : yield session Database \u00b6 sqlalchemy sync client fields \u00b6 engine \u00b6 sqlalchemy synchronization engine. Reference: Establishing Connectivity - the Engine \u2014 SQLAlchemy 1.4 Documentation Example: from sqlalchemy import create_engine engine = create_engine ( \"sqlite+pysqlite:///amisadmin.db\" , echo = True , future = True ) # engine = create_async_engine(\"mysql+pymysql://amisadmin:amisadmin@127.0.0.1:3306/amisadmin?charset=utf8mb4\", future=True) # engine = create_async_engine(\"postgresql+psycopg2://user:pass@host/dbname\", future=True) session_maker \u00b6 self . session_maker : sessionmaker = sessionmaker ( self . async_engine , autoflush = False ) method: \u00b6 session_generator \u00b6 def session_generator ( self ) -> Generator [ Session , Any , None ]: with self . session_maker () as session : yield session Reference project: \u00b6 sqlalchemy-database","title":"Database"},{"location":"utils/database/#asyncdatabase","text":"sqlalchemy asynchronous client","title":"AsyncDatabase"},{"location":"utils/database/#fields","text":"","title":"fields"},{"location":"utils/database/#engine","text":"","title":"engine"},{"location":"utils/database/#-sqlalchemy-asynchronous-engine","text":"Reference: Asynchronous I/O (asyncio) \u2014 SQLAlchemy 1.4 Documentation Example: from sqlalchemy.ext.asyncio import create_async_engine engine = create_async_engine ( \"sqlite+aiosqlite:///amisadmin.db\" , future = True ) # engine = create_async_engine(\"mysql+aiomysql://amisadmin:amisadmin@127.0.0.1:3306/amisadmin?charset=utf8mb4\", future=True) # engine = create_async_engine(\"postgresql+asyncpg://user:pass@host/dbname\", future=True)","title":"- sqlalchemy asynchronous engine."},{"location":"utils/database/#session_maker","text":"self . session_maker : sessionmaker = sessionmaker ( self . async_engine , class_ = AsyncSession , autoflush = False )","title":"session_maker"},{"location":"utils/database/#method","text":"","title":"method:"},{"location":"utils/database/#session_generator","text":"async def session_generator ( self ) -> AsyncGenerator [ AsyncSession , Any ]: async with self . session_maker () as session : yield session","title":"session_generator"},{"location":"utils/database/#database","text":"sqlalchemy sync client","title":"Database"},{"location":"utils/database/#fields_1","text":"","title":"fields"},{"location":"utils/database/#engine_1","text":"sqlalchemy synchronization engine. Reference: Establishing Connectivity - the Engine \u2014 SQLAlchemy 1.4 Documentation Example: from sqlalchemy import create_engine engine = create_engine ( \"sqlite+pysqlite:///amisadmin.db\" , echo = True , future = True ) # engine = create_async_engine(\"mysql+pymysql://amisadmin:amisadmin@127.0.0.1:3306/amisadmin?charset=utf8mb4\", future=True) # engine = create_async_engine(\"postgresql+psycopg2://user:pass@host/dbname\", future=True)","title":"engine"},{"location":"utils/database/#session_maker_1","text":"self . session_maker : sessionmaker = sessionmaker ( self . async_engine , autoflush = False )","title":"session_maker"},{"location":"utils/database/#method_1","text":"","title":"method:"},{"location":"utils/database/#session_generator_1","text":"def session_generator ( self ) -> Generator [ Session , Any , None ]: with self . session_maker () as session : yield session","title":"session_generator"},{"location":"utils/database/#reference-project","text":"sqlalchemy-database","title":"Reference project:"}]}